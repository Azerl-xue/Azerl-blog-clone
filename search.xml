<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈谈对 Java 注解的理解，解决了什么问题？</title>
      <link href="/2023/09/04/%E8%B0%88%E8%B0%88%E5%AF%B9-Java-%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
      <url>/2023/09/04/%E8%B0%88%E8%B0%88%E5%AF%B9-Java-%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈对-Java-注解的理解，解决了什么问题？"><a href="#谈谈对-Java-注解的理解，解决了什么问题？" class="headerlink" title="谈谈对 Java 注解的理解，解决了什么问题？"></a>谈谈对 Java 注解的理解，解决了什么问题？</h1><p><strong>注解就是代码中的特殊标记，这些标记可以在编译、类加载、运行时被读取，从而做相对应的处理</strong>。</p><p><strong>注解跟注释很像，区别是注释是给人看的，而注解是给程序看的，它可以被编译器读取</strong>。</p><h2 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h2><p>注解大多时候与反射或者<strong>AOP 切面结合</strong>使用，它的作用有很多，比如标记和检查，最重要的一点就是<strong>简化代码，降低耦合性，提高执行效率</strong>。</p><h2 id="注解的语法"><a href="#注解的语法" class="headerlink" title="注解的语法"></a>注解的语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 元注解,只能在方法上使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepeatSubmit &#123;</span><br><span class="line"><span class="comment">// 基本格式</span></span><br><span class="line">数据类型 元素名称();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带默认值</span></span><br><span class="line">数据类型 元素名称() <span class="keyword">default</span> 默认值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>注解元素支持如下数据类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">所有基本类型（<span class="type">int</span>,<span class="type">float</span>,<span class="type">boolean</span>,<span class="type">byte</span>,<span class="type">double</span>,<span class="type">char</span>,<span class="type">long</span>,<span class="type">short</span>）</span><br><span class="line"></span><br><span class="line">String</span><br><span class="line"></span><br><span class="line">Class</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Annotation</span></span><br><span class="line"></span><br><span class="line">上述类型的数组</span><br></pre></td></tr></table></figure><p>声明注解元素时<strong>可以使用基本类型但不允许使用任何包装类型，同时注解也可以作为元素的类型，也就是嵌套注解</strong>。</p><h2 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h2><p>Java 中有 <code>@Override、@Deprecated</code> 和 <code>@SuppressWarnings</code> 等<strong>内置注解</strong>；也有 <code>@Target、@Retention、@Documented、@Inherited</code> 等<strong>修饰注解的注解，称之为元注解</strong>。</p><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul><li>@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告。</li><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>用来<strong>指定注解的作用域</strong>（如方法、类或字段），其中 ElementType 是枚举类型，其定义如下，也代表可能的取值范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">/**标明该注解可以作用于类、接口（包括注解类型）或enum声明*/</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明该注解可以作用于字段(域)声明，包括enum实例 */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明该注解可以作用于方法声明 */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明该注解可以作用于参数声明 */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明注解可以作用于构造函数声明 */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明注解可以作用于局部变量声明 */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明注解可以作用于注解声明(应用于另一个注解上)*/</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 标明注解可以作用于包声明 */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标明注解可以作用于类型参数声明（1.8新加入）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型使用声明（1.8新加入)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：如果 @Target 无指定作用域，则默认可以作用于任何元素上。等同于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>用来<strong>指定注解的生命周期</strong>，它有三个值，对应 <code>RetentionPolicy</code> 中的三个枚举值，分别是：源码级别（source），类文件级别（class）或者运行时级别（runtime）</p><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p>执行 javadoc 的时候，标记这些注解是否包含在生成的用户文档中。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p><strong>标记这个注解具有继承性</strong>，比如 A 类被注解 @Table 标记，而 @Table 注解被 @Inherited 声明（具备继承性）；继承于 A 的子类，也继承 @Table 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明 Table 注解，有继承性</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>引用：<a href="https://cloud.tencent.com/developer/article/1935630">面试官：什么是 Java 注解？-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>好啦，说了这么多理论。大家也听累了，我也聊累了。那怎么自定义一个注解并让它起作用呢？下面我将<strong>带着你们看看我司的防止重复提交的注解是怎么实现的</strong>？当然，由于设计内部的东西，我只会写写伪代码。<strong>思路在前面介绍过了，为方便阅读我拿下来</strong>，大家理解就行。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5521492/2d29719c96b0378a43f7d1ff27bce94d.png" alt="img"></p><p>需求是：<strong>同一用户，三秒内重复提交一样的参数，就会报异常阻止重复提交，否则正常提交处理写请求</strong>。</p><p>定义注解</p><p>首先，定义注解必须是 @interface 修饰；其次，有四个考虑的点：</p><ul><li>注解的生命周期 @Retention，一般都是 RUNTIME 运行时。</li><li>注解的作用域 @Target，作用于写请求，也就是 controller 方法上。</li><li>是否需要元素，用分布式锁实现，必须要有锁的过期时间。给定默认值，也支持自定义。</li><li>是否生成 javadoc @Documented，这个注解无脑加就对了。</li></ul><p>基于此，我司的防止重复提交的自定义注解就出来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BanReSubmitLock &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁定时间，默认单位（秒）默认时间（3秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lockTime</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">3L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP 切面处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BanRepeatSubmitAop</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.nasus.framework.web.annotation.BanReSubmitLock)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">banReSubmitLockAop</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;banReSubmitLockAop()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundApi</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="comment">// 获取 AOP 切面方法签名 </span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) point.getSignature();</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">  <span class="comment">// 获取目标方法上的 BanRepeatSubmitLock 注解</span></span><br><span class="line">        <span class="type">BanReSubmitLock</span> <span class="variable">banReSubmitLock</span> <span class="operator">=</span> method.getAnnotation(BanReSubmitLock.class);</span><br><span class="line">  <span class="comment">// 根据用户信息以及提交参数，创建 Redis 分布式锁的 key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> createReSumbitLockKey(point, method);</span><br><span class="line">        <span class="comment">// 根据 key 获取分布式锁对象</span></span><br><span class="line">  <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> redisUtils.getReSumbitLock(lockKey);</span><br><span class="line">  <span class="comment">// 上锁</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">  <span class="comment">// 上锁失败，抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;请不要重复请求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// 其他处理</span></span><br><span class="line">  ...</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">private</span> String <span class="title function_">createReSumbitLockKey</span><span class="params">(ProceedingJoinPoint point, Method method)</span> &#123;</span><br><span class="line">  <span class="comment">// 拼接用户信息 &amp; 请求参数</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MD5 处理</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里利用了 AOP 切面的方式获取被 @NoReSubmitLock 修饰的方法，并借此拿到切点（被注解修饰方法）的参数、用户信息等等，通过 MD5 处理，最终尝试上锁。</p><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// NoReSubmitLock 注解修饰 save 方法，防止重复提交</span></span><br><span class="line">    <span class="meta">@NoReSubmitLock</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="comment">// 保存逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>使用也非常简单，只需要一个注解就可以完成大部分的逻辑；如果不用注解，每个写接口的方法都要写一遍防止重复提交的逻辑的话，代码非常繁琐，难以维护。通过这个例子相信你也看到了，注解的作用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了注解的作用主要是标记、检查以及解耦；介绍了注解的语法；介绍了注解的元素以及传值方式；介绍了 Java 的内置注解和元注解，最后通过我司的一个实际例子，介绍了注解是如何起作用的？</p><p>注解是代码的特殊标记，可以在程序编译、类加载、运行时被读取并做相关处理。其对应 RetentionPolicy 中的三个枚举，其中 SOURCE、CLASS 需要继承 AbstractProcessor （注解抽象处理器），并实现 process () 方法来处理我们自定义的注解。而 RUNTIME 级别是我们常用的级别，结合 Java 的反射机制，可以在很多场景优化代码。</p><p>- </p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用拷贝、浅拷贝和深拷贝区别</title>
      <link href="/2023/09/04/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/09/04/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="引用拷贝、浅拷贝和深拷贝区别"><a href="#引用拷贝、浅拷贝和深拷贝区别" class="headerlink" title="引用拷贝、浅拷贝和深拷贝区别"></a>引用拷贝、浅拷贝和深拷贝区别</h1><h2 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h2><p>即是对引用地址的拷贝，说明引用地址一样，指向堆中的对象是同一个对象。如果对一个对象进行改变，其他对象也会跟着改变。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ol><li>原对象与新对象是两个不同的对象。</li><li>拷贝出来的新对象与原对象内容一致</li><li>修改一个对象的内容，其他的对象也会跟着改变，说明在内存中还是同一个内存地址。</li></ol><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>相对于浅拷贝，修改一个对象，其他对象不会改变。</p><p>说明在内存中他们各占一块地方，互不影响</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 初入门</title>
      <link href="/2023/09/03/mongoDB-%E5%88%9D%E5%85%A5%E9%97%A8/"/>
      <url>/2023/09/03/mongoDB-%E5%88%9D%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-初入门"><a href="#MongoDB-初入门" class="headerlink" title="MongoDB 初入门"></a>MongoDB 初入门</h1><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><ul><li><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p></li><li><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p></li><li><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p></li><li><p>MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</p><p>2、你可以在MongoDB记录中设置任何属性的索引 (如：FirstName&#x3D;”Sameer”,Address&#x3D;”8 Gandhi Road”)来实现更快的排序。</p><p>3、你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</p><p>4、如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</p><p>5、Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</p><p>6、MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</p><p>7、Mongodb中的Map&#x2F;reduce主要是用来对数据进行批量处理和聚合操作。</p><p>8、Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</p><p>9、Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</p><p>10、GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</p><p>11、MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</p><p>12、MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</p><p>13、MongoDB安装简单。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里使用docker安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#拉取镜像 </span><br><span class="line">docker pull mongo:latest</span><br><span class="line"></span><br><span class="line">#创建和启动容器 </span><br><span class="line">docker run -d --restart=always -p 27017:27017 --name mymongo -v /data/db:/data/db -d mongo</span><br><span class="line"></span><br><span class="line">#进入容器 </span><br><span class="line">docker exec -it mymongo/bin/bash</span><br><span class="line"># 或者</span><br><span class="line">docker exec -it mymongo/bin/sh</span><br><span class="line"></span><br><span class="line">#使用MongoDB客户端进行操作 </span><br><span class="line">mongo </span><br><span class="line"></span><br><span class="line">&gt; show dbs #查询所有的数据库 </span><br><span class="line">admin 0.000GB </span><br><span class="line">config 0.000GB </span><br><span class="line">local 0.000GB </span><br></pre></td></tr></table></figure><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><table><thead><tr><th>SQL术语&#x2F;概念</th><th>MongoDB术语&#x2F;概念</th><th>解释&#x2F;说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>一个mongodb中可以建立多个数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1、 Help查看命令提示 </span><br><span class="line">db.help();</span><br><span class="line">2、 切换/创建数据库</span><br><span class="line">use test</span><br><span class="line">如果数据库不存在，则创建数据库，否则切换到指定数据库</span><br><span class="line">3、 查询所有数据库 </span><br><span class="line">show dbs;</span><br><span class="line">4、 删除当前使用数据库 </span><br><span class="line">db.dropDatabase();</span><br><span class="line">5、 查看当前使用的数据库 </span><br><span class="line">db.getName();</span><br><span class="line">6、 显示当前db状态 </span><br><span class="line">db.stats();</span><br><span class="line">7、 当前db版本 </span><br><span class="line">db.version();</span><br><span class="line">8、 查看当前db的链接机器地址 </span><br><span class="line">db.getMongo〇;</span><br></pre></td></tr></table></figure><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p>文档是一组键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>下表列出了 RDBMS 与 MongoDB 对应的术语：</p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>主键 (MongoDB 提供了  key 为 _id )</td></tr></tbody></table><p><strong>需要注意的是：</strong></p><p>1、文档中的键&#x2F;值对是有序的。</p><p>2、文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</p><p>3、MongoDB区分类型和大小写。</p><p>4、MongoDB的文档不能有重复的键。</p><p>5、文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</p><p><strong>文档键命名规范：</strong></p><p>1、键不能含有\0 (空字符)。这个字符用来表示键的结尾。</p><p>2、.和$有特别的意义，只有在特定环境下才能使用。</p><p>3、以下划线”_”开头的键是保留的(不是严格要求的)。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、 创建一个集合（table)</span><br><span class="line">db.createCollection( &quot;collName&quot;);</span><br><span class="line">2、 得到指定名称的集合（table )</span><br><span class="line">db.getCollection(&quot;user&quot;);</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真&#x2F;假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Min&#x2F;Max keys</td><td>将一个值与 BSON（二进制的  JSON）元素的最低值和最高值相对比。</td></tr><tr><td>Arrays</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Timestamp</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>Object</td><td>用于内嵌文档。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Symbol</td><td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的  ID。</td></tr><tr><td>Binary Data</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p><strong>适用场景</strong></p><p>1、网站数据：Mongo非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</p><p>2、缓存：由于性能很高，Mongo也适合作为信息基础设施的缓存层。在系统重启之后，由M ongo搭建的持久化缓存层可以避免下层的数据源过载。</p><p>3、大尺寸，低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵， 在此之前，很多时候程序员往往会选择传统的文件进行存储。</p><p>4、高伸缩性的场景：Mongo非常适合由数十或数百台服务器组成的数据库。Mongo的路线图中已经包含对Map Reduce弓摩的内置支持。</p><p>5、用于对象及 JSON数据的存储：Mongo的BSON数据格式非常适合文档化格式的存储 及查询。</p><p><strong>不适用场合</strong></p><p>1、高度事务性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</p><p>2、传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.User.save(&#123;name:<span class="string">&#x27;zhangsan&#x27;</span>,age:<span class="number">21</span>,sex:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="operator">&gt;</span> db.User.find()</span><br><span class="line">&#123;&quot;_id&quot;: Objectld(&quot;4f69e680c9106ee2ec95da66&quot;), &quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: <span class="number">21</span>,</span><br><span class="line">&quot;sex&quot;: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>_id组合</p><p>Objectld是、id”的默认类型。Objectld使用12字节的存储空间，每个字节二位十六进制数字， 是一个24位的字符串</p><p><img src="https://img1.imgtp.com/2023/09/03/0GbbWXze.png" alt="图片1.png"></p><p>1.时间戳：时间不断变化的</p><p>2.机器：主机的唯_标识码。通常是机器主机名的散列值，这样可以确保不同主机生成不同的Objectld ,不产生冲突。</p><p>3.PID:为了确保在同一台机器上并发的多个进程产生的Objectld是唯一的，所以加上进程标识符(PID).</p><p>4.计数器：前9个字节保证了同一秒钟不同机器不同进程产生的Objectld是唯一的。 后3个字节就是一个自动增加的计数器，确保相同进程同一秒产生的Objectld也是不一样。同一秒最多允许每个进程拥有IS 777 2托个不同的Objectld。</p><h3 id="QUERY"><a href="#QUERY" class="headerlink" title="QUERY"></a>QUERY</h3><p>1、WHERE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> name <span class="operator">=</span>  <span class="string">&#x27;zhangsan&#x27;</span>  </span><br><span class="line"><span class="operator">&gt;</span> db.User.find(&#123;name:&quot;zhangsan&quot;&#125;)  </span><br></pre></td></tr></table></figure><p>2、FIELDS</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> name, age <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> age  <span class="operator">=</span> <span class="number">21</span>  </span><br><span class="line"><span class="operator">&gt;</span> db.User.find(&#123;age:<span class="number">21</span>&#125;,  &#123;<span class="string">&#x27;name&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;)  </span><br></pre></td></tr></table></figure><p>3、SORT</p><p>在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">order</span> <span class="keyword">by</span> age  </span><br><span class="line"><span class="operator">&gt;</span> db.User.find().sort(&#123;age:<span class="number">1</span>&#125;)  </span><br></pre></td></tr></table></figure><p>4、SUCE</p><p>在 MongoDB 中使用 limit()方法来读取指定数量的数据，skip()方法来跳过指定数量的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">skip</span> <span class="number">2</span> limit <span class="number">3</span>  </span><br><span class="line"><span class="operator">&gt;</span> db.User.find().<span class="keyword">skip</span>(<span class="number">0</span>).limit(<span class="number">3</span>) </span><br></pre></td></tr></table></figure><p>5、IN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">21</span>,  <span class="number">26</span>, <span class="number">32</span>)  </span><br><span class="line"><span class="operator">&gt;</span> db.User.find(&#123;age:&#123;$<span class="keyword">in</span>:[<span class="number">21</span>,<span class="number">26</span>,<span class="number">32</span>]&#125;&#125;)  </span><br></pre></td></tr></table></figure><p>6、COUNT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> age  <span class="operator">&gt;</span><span class="number">20</span>  </span><br><span class="line"><span class="operator">&gt;</span>  db.User.find(&#123;age:&#123;$gt:<span class="number">20</span>&#125;&#125;).<span class="built_in">count</span>()  </span><br></pre></td></tr></table></figure><p>7、0R</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">User</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">21</span> <span class="keyword">or</span>  age <span class="operator">=</span> <span class="number">28</span> </span><br><span class="line"><span class="operator">&gt;</span>  db.User.find(&#123;$<span class="keyword">or</span>:[&#123;age:<span class="number">21</span>&#125;, &#123;age:<span class="number">28</span>&#125;]&#125;)  </span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>可直接用类似T-SQL条件表达式更新，或用SaveO更新从数据库返回到文档对象。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">update</span> Userset age <span class="operator">=</span> <span class="number">100</span>, sex <span class="operator">=</span> <span class="number">0</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;user1&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> db.User.update(&#123;name:&quot;zhangsan&quot;&#125;, &#123;$<span class="keyword">set</span>:&#123;age:<span class="number">100</span>, sex:<span class="number">0</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>Update()有几个参数需要注意。<br>db.collection.update(criteria, objNew, upsert, mult)<br>criteria:需要更新的条件表达式<br>objNew:更新表达式<br>upsert:如FI标记录不存在，是否插入新文档。<br>multi:是否更新多个文档。</p><h3 id="REMOVE"><a href="#REMOVE" class="headerlink" title="REMOVE"></a>REMOVE</h3><p>remove用于删除单个或全部文档，删除后的文档无法恢复。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.User.remove(id)</span><br><span class="line"># 移除对应id的行</span><br><span class="line"><span class="operator">&gt;</span> db.User.remove(&#123;&#125;)</span><br><span class="line"># 移除所有</span><br></pre></td></tr></table></figure><h3 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h3><p>MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)</p><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>db.article.insert(&#123;</span><br><span class="line">    title: <span class="string">&#x27;MongoDB Overview&#x27;</span>, </span><br><span class="line">   description: <span class="string">&#x27;MongoDB is no sql database&#x27;</span>,</span><br><span class="line">   by_user: <span class="string">&#x27;runoob.com&#x27;</span>,</span><br><span class="line">   url: <span class="string">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class="line">   tags: [<span class="string">&#x27;mongodb&#x27;</span>, <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;NoSQL&#x27;</span>],</span><br><span class="line">   likes: <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="operator">&gt;</span>db.article.insert(&#123;</span><br><span class="line">   title: <span class="string">&#x27;NoSQL Overview&#x27;</span>, </span><br><span class="line">   description: <span class="string">&#x27;No sql database is very fast&#x27;</span>,</span><br><span class="line">   by_user: <span class="string">&#x27;runoob.com&#x27;</span>,</span><br><span class="line">   url: <span class="string">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class="line">   tags: [<span class="string">&#x27;mongodb&#x27;</span>, <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;NoSQL&#x27;</span>],</span><br><span class="line">   likes: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="operator">&gt;</span>db.article.insert(&#123;</span><br><span class="line">   title: <span class="string">&#x27;Neo4j Overview&#x27;</span>, </span><br><span class="line">   description: <span class="string">&#x27;Neo4j is no sql database&#x27;</span>,</span><br><span class="line">   by_user: <span class="string">&#x27;Neo4j&#x27;</span>,</span><br><span class="line">   url: <span class="string">&#x27;http://www.neo4j.com&#x27;</span>,</span><br><span class="line">   tags: [<span class="string">&#x27;neo4j&#x27;</span>, <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;NoSQL&#x27;</span>],</span><br><span class="line">   likes: <span class="number">750</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="统计sum"><a href="#统计sum" class="headerlink" title="统计sum"></a>统计sum</h4><p>现在我们通过以上集合计算每个作者所写的文章数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> by_user, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> article <span class="keyword">group</span> <span class="keyword">by</span> by_user</span><br><span class="line"><span class="operator">&gt;</span> db.article.aggregate([&#123;$<span class="keyword">group</span> : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : <span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">&quot;_id&quot; : &quot;runoob.com&quot;,</span><br><span class="line">&quot;num_tutorial&quot; : <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">&quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">&quot;num_tutorial&quot; : <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">&quot;ok&quot; : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们通过字段 by_user 字段对数据进行分组，并计算 by_user 字段相同值的总和。</p><h4 id="常见的聚合表达式"><a href="#常见的聚合表达式" class="headerlink" title="常见的聚合表达式"></a>常见的聚合表达式</h4><table><thead><tr><th><strong>表达式</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>$sum</td><td>计算总和。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td>$avg</td><td>计算平均值</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td>$min</td><td>获取集合中所有文档对应值得最小值。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td>$max</td><td>获取集合中所有文档对应值得最大值。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td>$push</td><td>在结果文档中插入值到一个数组中。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td>$addToSet</td><td>在结果文档中插入值到一个数组中，但不创建副本。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据。</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td>db.mycol.aggregate([{$group  : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h2 id="Spring-整合MongoDB"><a href="#Spring-整合MongoDB" class="headerlink" title="Spring 整合MongoDB"></a>Spring 整合MongoDB</h2><p>spring-data-mongodb提供了MongoTemplate与MongoRepository两种方式访问mongodb，MongoRepository操作简单，MongoTemplate操作灵活，我们在项目中可以灵活适用这两种方式操作mongodb，MongoRepository的缺点是不够灵活，MongoTemplate正好可以弥补不足。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>测试使用springboot  2.2.12.RELEASE版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://192.168.145.132:27017/test</span></span><br></pre></td></tr></table></figure><h3 id="基于MongoTemplate-开发CRUD"><a href="#基于MongoTemplate-开发CRUD" class="headerlink" title="基于MongoTemplate 开发CRUD"></a>基于MongoTemplate 开发CRUD</h3><p>常用方法<br> mongoTemplate.findAll(User.class): 查询User文档的全部数据<br> mongoTemplate.findById(<id>, User.class): 查询User文档id为id的数据<br> mongoTemplate.find(query, User.class);: 根据query内的查询条件查询<br> mongoTemplate.upsert(query, update, User.class): 修改<br> mongoTemplate.remove(query, User.class): 删除<br> mongoTemplate.insert(User): 新增</id></p><p>Query对象<br> 1、创建一个query对象（用来封装所有条件对象)，再创建一个criteria对象（用来构建条件）<br> 2、 精准条件：criteria.and(“key”).is(“条件”)<br> 模糊条件：criteria.and(“key”).regex(“条件”)<br> 3、封装条件：query.addCriteria(criteria)<br> 4、大于（创建新的criteria）：Criteria gt &#x3D; Criteria.where(“key”).gt（“条件”）<br> 小于（创建新的criteria）：Criteria lt &#x3D; Criteria.where(“key”).lt（“条件”）<br> 5、Query.addCriteria(new Criteria().andOperator(gt,lt));<br> 6、一个query中只能有一个andOperator()。其参数也可以是Criteria数组。<br> 7、排序 ：query.with（new Sort(Sort.Direction.ASC, “age”). and(new Sort(Sort.Direction.DESC, “date”)))</p><p><strong>entity:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(&quot;User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Id</span></span><br><span class="line"> <span class="keyword">private</span> String id;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> Integer age;</span><br><span class="line"> <span class="keyword">private</span> String email;</span><br><span class="line"> <span class="keyword">private</span> String createDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemomogoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;4932200@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mongoTemplate.insert(user);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = mongoTemplate.findAll(User.class);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> </span><br><span class="line">mongoTemplate.findById(<span class="string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria</span><br><span class="line">                .where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .and(<span class="string">&quot;age&quot;</span>).is(<span class="number">20</span>));</span><br><span class="line">        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUsersLikeName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;est&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s%s%s&quot;</span>, <span class="string">&quot;^.*&quot;</span>, name, <span class="string">&quot;.*$&quot;</span>);</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;name&quot;</span>).regex(pattern));</span><br><span class="line">        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUsersPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;est&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s%s%s&quot;</span>, <span class="string">&quot;^.*&quot;</span>, name, <span class="string">&quot;.*$&quot;</span>);</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">&quot;name&quot;</span>).regex(pattern));</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalCount</span> <span class="operator">=</span> (<span class="type">int</span>) mongoTemplate.count(query, User.class);</span><br><span class="line">        List&lt;User&gt; userList = mongoTemplate.find(query.skip((pageNo - <span class="number">1</span>) * pageSize).limit(pageSize), User.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; pageMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        pageMap.put(<span class="string">&quot;list&quot;</span>, userList);</span><br><span class="line">        pageMap.put(<span class="string">&quot;totalCount&quot;</span>,totalCount);</span><br><span class="line">        System.out.println(pageMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mongoTemplate.findById(<span class="string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);</span><br><span class="line">        user.setName(<span class="string">&quot;test_1&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">25</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;493220990@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(user.getId()));</span><br><span class="line">        <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">        update.set(<span class="string">&quot;name&quot;</span>, user.getName());</span><br><span class="line">        update.set(<span class="string">&quot;age&quot;</span>, user.getAge());</span><br><span class="line">        update.set(<span class="string">&quot;email&quot;</span>, user.getEmail());</span><br><span class="line">        <span class="type">UpdateResult</span> <span class="variable">result</span> <span class="operator">=</span> mongoTemplate.upsert(query, update, User.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> result.getModifiedCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(<span class="string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>));</span><br><span class="line">        <span class="type">DeleteResult</span> <span class="variable">result</span> <span class="operator">=</span> mongoTemplate.remove(query, User.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> result.getDeletedCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于MongoRepository开发CRUD"><a href="#基于MongoRepository开发CRUD" class="headerlink" title="基于MongoRepository开发CRUD"></a>基于MongoRepository开发CRUD</h3><p><strong>添加Repository类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mongodb.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mongodb.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;User, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>test:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemomogoApplicationTests1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;3332200@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userRepository.findAll();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(<span class="string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        Example&lt;User&gt; userExample = Example.of(user);</span><br><span class="line">        List&lt;User&gt; userList = userRepository.findAll(userExample);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUsersLikeName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建匹配器，即如何使用查询条件</span></span><br><span class="line">        <span class="type">ExampleMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> ExampleMatcher.matching() <span class="comment">//构建对象</span></span><br><span class="line">                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="comment">//改变默认字符串匹配方式：模糊查询</span></span><br><span class="line">                .withIgnoreCase(<span class="literal">true</span>); <span class="comment">//改变默认大小写忽略方式：忽略大小写</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">        Example&lt;User&gt; userExample = Example.of(user, matcher);</span><br><span class="line">        List&lt;User&gt; userList = userRepository.findAll(userExample);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUsersPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span> Sort.by(Sort.Direction.DESC, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//0为第一页</span></span><br><span class="line">        <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line"><span class="comment">//创建匹配器，即如何使用查询条件</span></span><br><span class="line">        <span class="type">ExampleMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> ExampleMatcher.matching() <span class="comment">//构建对象</span></span><br><span class="line">                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="comment">//改变默认字符串匹配方式：模糊查询</span></span><br><span class="line">                .withIgnoreCase(<span class="literal">true</span>); <span class="comment">//改变默认大小写忽略方式：忽略大小写</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">        Example&lt;User&gt; userExample = Example.of(user, matcher);</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line">        Example&lt;User&gt; example = Example.of(user, matcher);</span><br><span class="line">        Page&lt;User&gt; pages = userRepository.findAll(example, pageable);</span><br><span class="line">        System.out.println(pages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(<span class="string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();</span><br><span class="line">        user.setName(<span class="string">&quot;张三_1&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">25</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;883220990@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">save</span> <span class="operator">=</span> userRepository.save(user);</span><br><span class="line">        System.out.println(save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        userRepository.deleteById(<span class="string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> spring </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 包装类的缓存机制</title>
      <link href="/2023/09/02/java-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/09/02/java-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="java-包装类的缓存机制"><a href="#java-包装类的缓存机制" class="headerlink" title="java 包装类的缓存机制"></a>java 包装类的缓存机制</h1><p>先说结论：当通过自动装箱机制创建包装类对象时，首先会判断数值是否在-128—-127的范围内，如果满足条件，则会从缓存（常量池）中寻找指定数值，若找到缓存，则不会新建对象，只是指向指定数值对应的包装类对象，否则，新建对象。</p><p>基本数据类型的包装类缓存<br>两种浮点数类型的包装类Float,Double并没有实现常量池技术。</p><p>在包装类中，缓存的基本数据类型值的范围如下：</p><table><thead><tr><th>基本数据类型</th><th>包装类型</th><th>缓存范围</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>Short</td><td>-128 ~ 127</td></tr><tr><td>int</td><td>Integer</td><td>-128 ~ 127</td></tr><tr><td>long</td><td>Long</td><td>-128 ~ 127</td></tr><tr><td>char</td><td>Character</td><td>0 ~ 127</td></tr><tr><td>boolean</td><td>Boolean</td><td>true,false</td></tr><tr><td>float</td><td>Float</td><td>无</td></tr><tr><td>double</td><td>Double</td><td>无</td></tr></tbody></table><p>除了Integer以外，其他包装类的缓存范围都不能改变。通过IntegerCache类的注释来看，和其他系统属性一样，在JVM启动时，cache数组的大小是可以通过设置-Djava.lang.Integer.IntegerCache.high&#x3D;xxx传递进来的。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>1）当包装类加载时，该包装类中的内部类xxCache会初始化一个包装类类型数组，最小值（固定值）为-128,而最大值（默认值）为127【可修改】，这个长度的缓存值放在方法区的常量池中，是所有线程共享的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];<span class="comment">//声明为final，所以缓存的对象会被放入常量池中；声明为statci，所以是在类加载的时候就创建好了</span></span><br><span class="line">       <span class="comment">//创建-128～127的值的包装类对象</span></span><br><span class="line">       <span class="keyword">static</span> &#123;</span><br><span class="line">           <span class="comment">// high value may be configured by property</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">               sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                   i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                   <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                   h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                   <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           high = h;</span><br><span class="line"></span><br><span class="line">           cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">           <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">               cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">           <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>（2）当发生自动包装的时候，调用valueOf方法，对需要包装的基本类型的值进行判断，如果在缓存值的范围内，则返回缓存的对象，否则创建一个新的对象返回。<br>自动装箱的valueOf方法源码（Integer类型举例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">//其中low是最小值，high是最大值</span></span><br><span class="line">   <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;=IntegerCache.high)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//返回的是缓存中的对象</span></span><br><span class="line">       <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="缓存的作用"><a href="#缓存的作用" class="headerlink" title="缓存的作用"></a>缓存的作用</h2><p>在缓存值范围内的对象可以直接在常量池中取出，不用创建新的对象；<br>当需要频繁的使用同一对象的时候，如果有缓存，则可以避免重复创建同一对象，节省空间开销和时间消耗，提升了性能。</p><p>引用：<a href="https://blog.csdn.net/chenchuxu/article/details/78725966">java 包装类的缓存机制_chenchuxu的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyExcel</title>
      <link href="/2023/09/02/easyExcel/"/>
      <url>/2023/09/02/easyExcel/</url>
      
        <content type="html"><![CDATA[<h1 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h1><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p><p>文档地址：<a href="https://alibaba-easyexcel.github.io/index.html">https://alibaba-easyexcel.github.io/index.html</a></p><p>github地址：<a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p><ul><li>导出实例</li></ul><p>示例链接：<a href="https://alibaba-easyexcel.github.io/quickstart/write.html">https://alibaba-easyexcel.github.io/quickstart/write.html</a></p><ul><li>导入示例</li></ul><p>示例链接：<a href="https://alibaba-easyexcel.github.io/quickstart/read.html">https://alibaba-easyexcel.github.io/quickstart/read.html</a></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>entity:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserData</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户编号&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> uid;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名称&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> write:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testwrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数据集合</span></span><br><span class="line">        List&lt;UserData&gt; userDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="type">UserData</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserData</span>();</span><br><span class="line">                    user.setUid(i);</span><br><span class="line">                    user.setUsername(<span class="string">&quot;lucy&quot;</span>+i);</span><br><span class="line">            userDataList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置excel的路径和名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\testexcel\\01.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">//调用方法实现写操作</span></span><br><span class="line">        EasyExcel.write(fileName, UserData.class).sheet(<span class="string">&quot;用户信息&quot;</span>).doWrite(userDataList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read:</p><ul><li>read需要一个Listener类来监听读操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserData&gt; &#123;</span><br><span class="line">    <span class="comment">//从第二行开始一行一行读取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserData userData, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        System.out.println(userData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取表头</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        System.out.println(headMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取之后的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnalysisEventListener这个类中还封装了其他方法，这里就不一一赘述了</p><p>readmain：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRead</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置读取路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;E:\\testexcel\\01.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">//du</span></span><br><span class="line">        EasyExcel.read(filename, UserData.class, <span class="keyword">new</span> <span class="title class_">ExcelListener</span>()).sheet(<span class="string">&quot;用户信息&quot;</span>).doRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyExcel读操作返回空值</title>
      <link href="/2023/09/02/easyExcel%E8%AF%BB%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E7%A9%BA%E5%80%BC/"/>
      <url>/2023/09/02/easyExcel%E8%AF%BB%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E7%A9%BA%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="easyExcel读操作返回空值"><a href="#easyExcel读操作返回空值" class="headerlink" title="easyExcel读操作返回空值"></a>easyExcel读操作返回空值</h1><p>经排查发现lombok中的@Accessors(chain &#x3D; true)注解与easyExcel冲突去掉就好了</p><p>示范：</p><p>entity:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserData</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户编号&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> uid;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名称&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listener:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserData&gt; &#123;</span><br><span class="line">    <span class="comment">//从第二行开始一行一行读取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserData userData, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        System.out.println(userData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取表头</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        System.out.println(headMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取之后的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRead</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置读取路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;E:\\testexcel\\01.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">//du</span></span><br><span class="line">        EasyExcel.read(filename, UserData.class, <span class="keyword">new</span> <span class="title class_">ExcelListener</span>()).sheet(<span class="string">&quot;用户信息&quot;</span>).doRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;0=用户编号, 1=用户名称&#125;</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br><span class="line">UserData(uid=0, username=null)</span><br></pre></td></tr></table></figure><p>去掉注解后测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserData</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户编号&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> uid;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名称&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;0=用户编号, 1=用户名称&#125;</span><br><span class="line">UserData(uid=0, username=lucy0)</span><br><span class="line">UserData(uid=1, username=lucy1)</span><br><span class="line">UserData(uid=2, username=lucy2)</span><br><span class="line">UserData(uid=3, username=lucy3)</span><br><span class="line">UserData(uid=4, username=lucy4)</span><br><span class="line">UserData(uid=5, username=lucy5)</span><br><span class="line">UserData(uid=6, username=lucy6)</span><br><span class="line">UserData(uid=7, username=lucy7)</span><br><span class="line">UserData(uid=8, username=lucy8)</span><br><span class="line">UserData(uid=9, username=lucy9)</span><br></pre></td></tr></table></figure><p>success</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
            <tag> easyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>== 与 equals?hashCode 与 equals ?</title>
      <link href="/2023/08/31/%E4%B8%8E-equa-ls-ha-shCode-%E4%B8%8E-equals/"/>
      <url>/2023/08/31/%E4%B8%8E-equa-ls-ha-shCode-%E4%B8%8E-equals/</url>
      
        <content type="html"><![CDATA[<h1 id="‘-与-equals-hashCode-与-equals-’"><a href="#‘-与-equals-hashCode-与-equals-’" class="headerlink" title="‘&#x3D;&#x3D; 与 equals?hashCode 与 equals ?’"></a>‘&#x3D;&#x3D; 与 equals?hashCode 与 equals ?’</h1><p>先说结论：</p><ul><li>&#x3D;&#x3D; 比较的是两个对象在java虚拟机中的地址</li><li>equals 默认比较的也是两个对象在java虚拟机中的地址，但是我们可以对一个对象的equals方法进行重写，而“&#x3D;&#x3D;”我们无法重写</li><li>hashcode 返回一个对象在java虚拟机中的地址</li></ul><h2 id><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>“&#x3D;&#x3D;”无论在什么情况下比较的都是两者的jvm地址，一样就是一样，不一样就是不一样。对任何两个新创建的对象来说，它们在堆（堆是java的一块最大的内存，里边存放了差不多所有的实例化对象）中被分配内存，是两块不同的内存，所以地址肯定是不一样的，&#x3D;&#x3D;的结果也是false</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line"><span class="type">Worker</span> <span class="variable">worker2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">System.out.println(worker==worker2);</span><br></pre></td></tr></table></figure><p>结果为false</p><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line">System.out.println(str1==str2);</span><br></pre></td></tr></table></figure><p>这个输出结果是true，因为在jvm中他们是两个引用变量指向同一个常量，所以在jvm中他们相同</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>任何一个对象的equels源码，前几行基本都是 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，默认地，equals方法就是调用“&#x3D;&#x3D;”，来比较两个对象的内存地址，相同就返回true。</p><p>而equals方法与“&#x3D;&#x3D;”相比优势就在于我们可以对一个对象的equals方法进行重写，重新定义两个对象的相等关系。</p><p>java.lang.String类就是一个很好的例子，它重写了equals方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="type">char</span> v1[] = value;</span><br><span class="line">                <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到的是，如果两个String对象“&#x3D;&#x3D;”之后返回false，那么equals方法还会去比较两个字符串的内容，如果内容相同，也会返回true，比如下边这两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line">System.out.println(str3.equals(str4));</span><br></pre></td></tr></table></figure><p>还是str3与str4比较，而这次返回的，则是true。</p><h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><p>我们先来看看这几行代码和它们的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1.hashCode());</span><br><span class="line">System.out.println(str2.hashCode());</span><br><span class="line">System.out.println(str3.hashCode());</span><br><span class="line">System.out.println(str4.hashCode());</span><br><span class="line">System.out.println(str3 == str4);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">92567585</span></span><br><span class="line"><span class="number">92567585</span></span><br><span class="line"><span class="number">94476195</span></span><br><span class="line"><span class="number">94476195</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>默认情况下，Object中的hashCode() 返回对象的哈希码（hashcode）。在java中，如果hashcode相同，对象可以相同，可以不同，但若hashcode不同，对象必然不同。</p><p>在使用Object的equals()方法进行对象比较时，java会首先计算出两个对象的hashCode并进行对比（这个过程非常简单而且节省JVM的时间），如果两个两个对象的hashCode相同，则直接判定为两对象相等。</p><p>而String类就即重写了Object的equals方法，也重写了Object的hashcode方法，方便我们快速的对两个字符串进行对比。也正是因为如此，str3和str4的hashcode值是相同的，两个对象也可以判断为相同。</p><p>当然这里我们也要注意，str1和str2本质是两个不同引用（str1、str2）指向同一块内存（JVM中方法区的运行时常量池中的一小块内存）。而str3和str4的本质是两个不同引用（str3、str4）指向两块不同的内存（JVM中堆内存的两块不同内存），只不过这两个String对象的hashCode()方法返回值相同，所以equals方法判定两个对象相同。而“&#x3D;&#x3D;”对比的是两个对象的内存地址是否相同，故结果为false。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String s = new String(abc); 这段代码创建了⼏个字符串对象？</title>
      <link href="/2023/08/30/String-s1-new-String-abc-%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%88%9B%E5%BB%BA%E4%BA%86%E2%BC%8F%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%EF%BC%9F/"/>
      <url>/2023/08/30/String-s1-new-String-abc-%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%88%9B%E5%BB%BA%E4%BA%86%E2%BC%8F%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="String-s-new-String-abc-这段代码创建了⼏个字符串对象？"><a href="#String-s-new-String-abc-这段代码创建了⼏个字符串对象？" class="headerlink" title="String s &#x3D; new String(abc); 这段代码创建了⼏个字符串对象？"></a>String s &#x3D; new String(abc); 这段代码创建了⼏个字符串对象？</h1><p><strong>答案：</strong></p><ul><li>如果常量池中存在 “abc” 这个字符串，那么直接在栈中创建一个引用变量 s ，然后指向常量池中的”abc”</li><li>如果常量池中没有这个  “abc” 则要在常量池分配一块空间存储这个字符串，然后创建一个引用变量 s 指向它</li></ul><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>首先看一下常见的代码<br>        String s1 &#x3D; “hello”;<br>        String s2 &#x3D; new String(“hello”);<br>        String s3 &#x3D; new String(“hello”);<br>        String s4 &#x3D; new String(“world”);<br>上述代码：</p><p>第一行在常量池创建了一个对象”hello”，然后返回常量池中”hello”的地址给s1变量；</p><p>第二行在堆中创建一块内存，将该内存地址返回给s2变量。紧接着，会去常量池中找是否有“hello”字符串，如果没有就在常量池分配一块空间存放”hello”，然后在堆中创建一个常量池中此”hello”对象的拷贝对象；如果有就直接在堆中创建一个new出来的”hello”对象。在本例中，由于常量池已经存在了”hello”，所以这行代码只创建一个对象，即堆上new出来的对象；</p><p>第三行在堆中创建一块内存，将该内存地址返回给s3变量。该内存存放一个new出来的”hello”对象；</p><p>第四行在堆中创建一块内存，将该内存地址返回给s4变量。紧接着，发现常量池中没有”world”字符串，于是在常量池分配一块空间存放”world”，然后在堆中创建一个常量池中此”world”对象的拷贝对象。因此，这行代码创建了2个对象。</p><p>上述解释可以参考下图：</p><p><img src="https://img1.imgtp.com/2023/08/30/xaAH8d59.png" alt="1693406377260.png"></p><p>————————————————<br>版权声明：本文为CSDN博主「XDU_Super」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/superterence/article/details/120055661">https://blog.csdn.net/superterence/article/details/120055661</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap.yml配置不生效问题</title>
      <link href="/2023/08/30/bootstrap-yml%E9%85%8D%E7%BD%AE%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/30/bootstrap-yml%E9%85%8D%E7%BD%AE%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="bootstrap-yml配置不生效问题"><a href="#bootstrap-yml配置不生效问题" class="headerlink" title="bootstrap.yml配置不生效问题"></a>bootstrap.yml配置不生效问题</h1><p><strong>解决方法:</strong><br>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</title>
      <link href="/2023/08/30/String-%E3%80%81-StringBuffer-%E5%92%8C-StringBuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-Strin-g-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/"/>
      <url>/2023/08/30/String-%E3%80%81-StringBuffer-%E5%92%8C-StringBuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-Strin-g-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="String-、-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String-、-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h1><table><thead><tr><th></th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>执行速度</td><td>最差</td><td>其次</td><td>最高</td></tr><tr><td>线程安全</td><td>线程安全</td><td>线程安全</td><td>线程不安全</td></tr><tr><td>使用场景</td><td>少量字符串操作</td><td>多线程环境下的大量操作</td><td>单线程环境下的大量操作</td></tr></tbody></table><p><strong>String</strong>：</p><ul><li>对于String来说，是把数据存放在了常量池中，因为所有的String，默认都是以常量形式保存，且由final修饰，因此在线程池中它是线程安全的。因为每一个String当被创建好了以后，他就不再发生任何变化，但是它的执行速度是最差的。<br>我们要创建String的时候，他在常量池中对这些信息进行处理，如果在程序中出现了大量字符串拼接的工作，效率是非常底下的。<br>因此使用场景是在少量字符串操作的时候才建议直接使用String来操作。</li></ul><p><strong>StirngBuffer</strong>：（效率不如StringBuilder，但远比String要高）</p><ul><li>StringBuffer相对于StringBuilder效率要相对低一点，但也远比String要高的多。效率低的原因：对于StringBuffer来说更多的考虑到了多线程的情况，在进行字符串操作的时候，它使用了synchronize关键字，对方法进行了同步处理。<br>因此StringBuffer适用于多线程环境下的大量操作。</li></ul><p><strong>StringBuilder</strong>：（没有考虑线程安全问题）</p><ul><li>线程安全与线程不安全：<br>在进行多线程处理的时候，如果多个线程对于这一个对象同时产生操作，会产生预期之外的结果。对于StringBuilder来说，执行效率虽然高，但是因为线程不安全，所以不建议在多线程的环境下对同一个StringBuilder对象进行操作。<br>因此StringBuilder适用于单线程环境下的大量字符串操作。</li></ul><p>————————————————<br>版权声明：本文为CSDN博主「发呆小菜鸟」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Turniper/article/details/111112824">https://blog.csdn.net/Turniper/article/details/111112824</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中的⼏种基本数据类型是什么？对应的包装类型是什么？各⾃占⽤多少字节</title>
      <link href="/2023/08/30/Java-%E4%B8%AD%E7%9A%84%E2%BC%8F%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%90%84%E2%BE%83%E5%8D%A0%E2%BD%A4%E5%A4%9A%E5%B0%91%E5%AD%97%E8%8A%82/"/>
      <url>/2023/08/30/Java-%E4%B8%AD%E7%9A%84%E2%BC%8F%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%90%84%E2%BE%83%E5%8D%A0%E2%BD%A4%E5%A4%9A%E5%B0%91%E5%AD%97%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-中的⼏种基本数据类型是什么？对应的包装类型是什么？各⾃占⽤多少字节"><a href="#Java-中的⼏种基本数据类型是什么？对应的包装类型是什么？各⾃占⽤多少字节" class="headerlink" title="Java 中的⼏种基本数据类型是什么？对应的包装类型是什么？各⾃占⽤多少字节"></a>Java 中的⼏种基本数据类型是什么？对应的包装类型是什么？各⾃占⽤多少字节</h1><p><img src="https://img1.imgtp.com/2023/08/30/Ri16khKV.png" alt="1693364342962.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus-study</title>
      <link href="/2023/08/30/mybatis-plus-study/"/>
      <url>/2023/08/30/mybatis-plus-study/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-plus-study"><a href="#mybatis-plus-study" class="headerlink" title="mybatis-plus-study"></a>mybatis-plus-study</h1><p>先用 Spring Initializr 快速初始化一个 Spring Boot 工程</p><p>版本：2.2.1.RELEASE</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p><strong>注意：引入 MyBatis-Plus 之后请不要再次引入 MyBatis，以避免因版本差异导致的问题。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok用来简化实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建数据源"><a href="#创建数据源" class="headerlink" title="创建数据源"></a>创建数据源</h3><p>先创建mybatis_plus数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>)<span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>)<span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="在application-yml中编写数据源"><a href="#在application-yml中编写数据源" class="headerlink" title="在application.yml中编写数据源"></a>在application.yml中编写数据源</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.145.131:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">????</span></span><br></pre></td></tr></table></figure><h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demomptest.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemomptestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemomptestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写实体"><a href="#编写实体" class="headerlink" title="编写实体"></a>编写实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写mapper"><a href="#编写mapper" class="headerlink" title="编写mapper"></a>编写mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以去掉启动类上的MapperScan注解，在mapper类转而上使用@Mapper注解不使用@Repository是一样的效果</p><h2 id="Mp的主键策略"><a href="#Mp的主键策略" class="headerlink" title="Mp的主键策略"></a>Mp的主键策略</h2><h3 id="Mp的默认主键策略为ASSIGN-ID"><a href="#Mp的默认主键策略为ASSIGN-ID" class="headerlink" title="Mp的默认主键策略为ASSIGN_ID"></a>Mp的默认主键策略为ASSIGN_ID</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>雪花算法：分布式ID生成器</p><p>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。</p><h3 id="AUTO自增策略"><a href="#AUTO自增策略" class="headerlink" title="AUTO自增策略"></a>AUTO自增策略</h3><p>需要在创建数据表的时候设置主键自增</p><p>实体字段中配置 @TableId(type &#x3D; IdType.AUTO)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>要想影响所有实体的配置，可以设置全局主键配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br></pre></td></tr></table></figure><h2 id="自动填充和乐观锁"><a href="#自动填充和乐观锁" class="headerlink" title="自动填充和乐观锁"></a>自动填充和乐观锁</h2><p><a href="https://azerl.top/2023/08/05/%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/?highlight=%E8%87%AA%E5%8A%A8">公共字段自动填充 | Azerl.blog</a></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><strong>主要适用场景：</strong>当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新</p><p><strong>乐观锁实现方式：</strong></p><p>取出记录时，获取当前version</p><p>更新时，带上这个version</p><p>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</p><p>如果version不对，就更新失败</p><p><strong>实操：</strong></p><ol><li><p>先在表中添加一个字段version用于乐观锁对比</p></li><li><p>修改实体类，添加字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>创建包config，创建文件MybatisPlusConfig.java，此时可以删除主类中的 @MapperScan 扫描注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.demomptest.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成</p></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><h3 id="添加分页插件"><a href="#添加分页插件" class="headerlink" title="添加分页插件"></a>添加分页插件</h3><p>配置类中添加@Bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试selectPage分页"><a href="#测试selectPage分页" class="headerlink" title="测试selectPage分页"></a>测试selectPage分页</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//返回对象得到分页所有数据</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> userPage.getPages(); <span class="comment">//总页数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> userPage.getCurrent(); <span class="comment">//当前页</span></span><br><span class="line">    List&lt;User&gt; records = userPage.getRecords(); <span class="comment">//查询数据集合</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> userPage.getTotal(); <span class="comment">//总记录数</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> userPage.hasNext();  <span class="comment">//下一页</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> userPage.hasPrevious(); <span class="comment">//上一页</span></span><br><span class="line"></span><br><span class="line">    System.out.println(pages);</span><br><span class="line">    System.out.println(current);</span><br><span class="line">    System.out.println(records);</span><br><span class="line">    System.out.println(total);</span><br><span class="line">    System.out.println(hasNext);</span><br><span class="line">    System.out.println(hasPrevious);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试selectMapsPage分页"><a href="#测试selectMapsPage分页" class="headerlink" title="测试selectMapsPage分页"></a>测试selectMapsPage分页</h4><p>当指定了特定的查询列时，希望分页结果列表只返回被查询的列，而不是很多null值</p><p>测试selectMapsPage分页：结果集是Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectMapsPage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//Page不需要泛型</span></span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; page = newPage&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; pageParam = userMapper.selectMapsPage(page, <span class="literal">null</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; records = pageParam.getRecords();</span><br><span class="line">records.forEach(System.out::println);</span><br><span class="line">System.out.println(pageParam.getCurrent());</span><br><span class="line">System.out.println(pageParam.getPages());</span><br><span class="line">System.out.println(pageParam.getSize());</span><br><span class="line">System.out.println(pageParam.getTotal());</span><br><span class="line">System.out.println(pageParam.hasNext());</span><br><span class="line">System.out.println(pageParam.hasPrevious());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件构造器和常用接口"><a href="#条件构造器和常用接口" class="headerlink" title="条件构造器和常用接口"></a>条件构造器和常用接口</h2><h3 id="wrapper-的继承关系"><a href="#wrapper-的继承关系" class="headerlink" title="wrapper 的继承关系"></a>wrapper 的继承关系</h3><p><img src="https://img1.imgtp.com/2023/08/30/IdWgiGAH.png" alt="1693366601176.png"></p><p>Wrapper ： 条件构造抽象类，最顶端父类  </p><p>  AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</p><p>​    QueryWrapper ： 查询条件封装</p><p>​    UpdateWrapper ： Update 条件封装</p><p>  AbstractLambdaWrapper ： 使用Lambda 语法</p><p>​    LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</p><p>​    LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><table><thead><tr><th><strong>查询方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>setSqlSelect</strong></td><td>设置 SELECT 查询字段</td></tr><tr><td><strong>where</strong></td><td>WHERE  语句，拼接  + WHERE 条件</td></tr><tr><td><strong>and</strong></td><td>AND  语句，拼接  + AND 字段&#x3D;值</td></tr><tr><td><strong>andNew</strong></td><td>AND  语句，拼接  + AND (字段&#x3D;值)</td></tr><tr><td><strong>or</strong></td><td>OR  语句，拼接  + OR 字段&#x3D;值</td></tr><tr><td><strong>orNew</strong></td><td>OR  语句，拼接  + OR (字段&#x3D;值)</td></tr><tr><td><strong>eq</strong></td><td>等于&#x3D;</td></tr><tr><td><strong>allEq</strong></td><td>基于 map 内容等于&#x3D;</td></tr><tr><td><strong>ne</strong></td><td>不等于&lt;&gt;</td></tr><tr><td><strong>gt</strong></td><td>大于&gt;</td></tr><tr><td><strong>ge</strong></td><td>大于等于&gt;&#x3D;</td></tr><tr><td><strong>lt</strong></td><td>小于&lt;</td></tr><tr><td><strong>le</strong></td><td>小于等于&lt;&#x3D;</td></tr><tr><td><strong>like</strong></td><td>模糊查询 LIKE</td></tr><tr><td><strong>notLike</strong></td><td>模糊查询 NOT LIKE</td></tr><tr><td><strong>in</strong></td><td>IN  查询</td></tr><tr><td><strong>notIn</strong></td><td>NOT  IN 查询</td></tr><tr><td><strong>isNull</strong></td><td>NULL  值查询</td></tr><tr><td><strong>isNotNull</strong></td><td>IS  NOT NULL</td></tr><tr><td><strong>groupBy</strong></td><td>分组 GROUP BY</td></tr><tr><td><strong>having</strong></td><td>HAVING  关键词</td></tr><tr><td><strong>orderBy</strong></td><td>排序 ORDER BY</td></tr><tr><td><strong>orderAsc</strong></td><td>ASC  排序 ORDER  BY</td></tr><tr><td><strong>orderDesc</strong></td><td>DESC  排序 ORDER  BY</td></tr><tr><td><strong>exists</strong></td><td>EXISTS  条件语句</td></tr><tr><td><strong>notExists</strong></td><td>NOT  EXISTS 条件语句</td></tr><tr><td><strong>between</strong></td><td>BETWEEN  条件语句</td></tr><tr><td><strong>notBetween</strong></td><td>NOT  BETWEEN 条件语句</td></tr><tr><td><strong>addFilter</strong></td><td>自由拼接 SQL</td></tr><tr><td><strong>last</strong></td><td>拼接在最后，例如：last(“LIMIT 1”)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
            <tag> mybatis </tag>
            
            <tag> mp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机静态IP</title>
      <link href="/2023/08/24/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81IP/"/>
      <url>/2023/08/24/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81IP/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机静态IP"><a href="#虚拟机静态IP" class="headerlink" title="虚拟机静态IP"></a>虚拟机静态IP</h1><p><strong>首先我们需要将虚拟机中对应系统的网络适配器改成NAT模式</strong></p><p><img src="https://img1.imgtp.com/2023/08/24/o9ViGGn1.png" alt="1692876180414.png"></p><p>然后再点击<a href="https://so.csdn.net/so/search?q=Vmware&spm=1001.2101.3001.7020">Vmware</a>“虚拟网络编辑器”，配置NAT模式网卡（一般写的是VMnet8），先点击更改设置按钮，因为需要使用管理员才可以修改配置，在弹出窗口中选是。</p><p><img src="https://img1.imgtp.com/2023/08/24/VAw9Eu3j.png" alt="1692876258603.png"></p><p>等到重新加载编辑器窗口后，再点选VMnet8切换回来，配置如下几步，勾选上“将主机虚拟适配器连接到此网络”和“使用本地DHCP服务将IP地址分配给虚拟机”（默认也是勾选的，如果没勾选要勾选上），然后配置下子网IP（如果有值可以不改，一般可以设置为192.168.x.0这种格式），子网掩码一般为255.255.255.0</p><p><img src="https://img1.imgtp.com/2023/08/24/LRQfaskP.png" alt="1692876308718.png"></p><p><strong>再点击NAT设置按钮，配置网关IP，如下：</strong></p><p><img src="https://img1.imgtp.com/2023/08/24/zHCgvyUz.png" alt="1692876351748.png"></p><p>再点击DNS设置按钮，取消勾选“自动检测可用的DNS服务器”按钮，再配置DNS服务器，保存关闭窗口</p><p><img src="https://img1.imgtp.com/2023/08/24/gzDnZm5e.png" alt="1692876388563.png"></p><p>再切回到主机，如果你的win10系统，在桌面右键选择“个性化”，在搜索框检索 “查看网络连接”，这样就来到了网络配置页面，如下图</p><p><img src="https://img1.imgtp.com/2023/08/24/Z58HW9Ai.png" alt="1692876437445.png"></p><p>选中VMnet8，右键属性，在打开的页面中选择“Internet协议版本 4”，再点击属性，如下图：</p><p><img src="https://img1.imgtp.com/2023/08/24/TyusmB21.png" alt="1692876464466.png"></p><p>在打开的页面进行如下配置：</p><p><img src="https://img1.imgtp.com/2023/08/24/vFm8M6Fu.png" alt="1692876494615.png"></p><p>接下来我们需要进入到系统中进行配置文件的操作，打开Terminal面板，执行如下命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure><p>找到一个以ifcfg-ens开头的文件，并进行编辑</p><p><img src="https://img1.imgtp.com/2023/08/24/D8dKLXTp.png" alt="1692876575787.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim ifcfg-ens33</span><br><span class="line">//如果没有安装vim，可以安装一下，很好用。</span><br><span class="line"></span><br><span class="line">//添加如下配置</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">BOOTPROTO=&quot;none&quot;</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.73.123&quot;  #这里就是你设置的固定IP</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.73.2&quot;</span><br><span class="line">DNS1=&quot;114.114.114.119&quot;</span><br><span class="line">DNS2=&quot;114.114.115.119&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/24/APOKUDLv.png" alt="1692876601998.png"></p><p>编辑完成后，需要重启一下网卡，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>最后查看下是否配置成功，使用如下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>这样就大功告成啦<br>————————————————<br>版权声明：本文为CSDN博主「阿雷在编程」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_26796255/article/details/118915145">https://blog.csdn.net/qq_26796255/article/details/118915145</a></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>修改如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 设置 IP 地址为静态 IP</span><br><span class="line">BOOTPROTO=static</span><br><span class="line"># 随 network 服务启动</span><br><span class="line">ONBOOT=yes</span><br><span class="line"># 指定静态 IP</span><br><span class="line">IPADDR=192.168.16.17</span><br><span class="line"># 设置子网掩码</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"># 设置网关</span><br><span class="line">GATEWAY=192.168.16.2</span><br><span class="line"># 设置DNS</span><br><span class="line">DNS1=192.168.16.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重启网络</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Vmware </tag>
            
            <tag> Centos 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doker pull hello-world</title>
      <link href="/2023/08/24/doker-pull-hello-world/"/>
      <url>/2023/08/24/doker-pull-hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Doker-pull-hello-world"><a href="#Doker-pull-hello-world" class="headerlink" title="Doker pull hello-world"></a>Doker pull hello-world</h1><h2 id="Centos安装Docker"><a href="#Centos安装Docker" class="headerlink" title="Centos安装Docker"></a>Centos安装Docker</h2><p>首先在Centos系统中安装Docker</p><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Docs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>接着一直y就行了</p><p>安装完成后运行Docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>查看docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/24/rslVzzwd.png" alt="1692880188438.png"></p><p>这样我们的docker就安装好了尝试运行一个镜像 运行hello-world img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/2023/08/13/springCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/13/springCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p>Martin Fowler在2014年提出了“微服务”架构，它是一种全新的架构风格。</p><ul><li>微服务把一个庞大的单体应用拆分为一个个的小型服务，比如我们原来的图书管理项目中，有登录、注册、添加、删除、搜索等功能，那么我们可以将这些功能单独做成一个个小型的SpringBoot项目，独立运行。</li><li>每个小型的微服务，都可以独立部署和升级，这样，就算整个系统崩溃，那么也只会影响一个服务的运行。</li><li>微服务之间使用HTTP进行数据交互，不再是单体应用内部交互了，虽然这样会显得更麻烦，但是带来的好处也是很直接的，甚至能突破语言限制，使用不同的编程语言进行微服务开发，只需要使用HTTP进行数据交互即可。</li><li>我们可以同时购买多台主机来分别部署这些微服务，这样，单机的压力就被分散到多台机器，并且每台机器的配置不一定需要太高，这样就能节省大量的成本，同时安全性也得到很大的保证。</li><li>甚至同一个微服务可以同时存在多个，这样当其中一个服务器出现问题时，其他服务器也在运行同样的微服务，这样就可以保证一个微服务的高可用。</li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>SpringCloud是Spring提供的一套分布式解决方案，集合了一些大型互联网公司的开源产品，包括诸多组件，共同组成SpringCloud框架。并且，它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、熔断机制、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>由于中小型公司没有独立开发自己的分布式基础设施的能力，使用SpringCloud解决方案能够以最低的成本应对当前时代的业务发展。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>官方文档：<a href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/">https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/</a></p><ul><li>Eureka  -  实现服务治理（服务注册与发现），我们可以对所有的微服务进行集中管理，包括他们的运行状态、信息等。</li><li>Ribbon  -  为服务之间相互调用提供负载均衡算法（现在被SpringCloudLoadBalancer取代）</li><li>Hystrix  -  断路器，保护系统，控制故障范围。暂时可以跟家里电闸的保险丝类比，当触电危险发生时能够防止进一步的发展。</li><li>Zuul   -     api网关，路由，负载均衡等多种作用，就像我们的路由器，可能有很多个设备都连接了路由器，但是数据包要转发给谁则是由路由器在进行（已经被SpringCloudGateway取代）</li><li>Config  -  配置管理，可以实现配置文件集中管理</li></ul><h2 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h2><h3 id="服务间调用"><a href="#服务间调用" class="headerlink" title="服务间调用"></a>服务间调用</h3><p>需要进行服务远程调用我们需要用到<code>RestTemplate</code>来进行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RestTemplate支持多种方式的远程调用</span></span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"><span class="comment">//这里通过调用getForObject来请求其他服务，并将结果自动进行封装</span></span><br><span class="line"><span class="comment">//获取User信息</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> template.getForObject(<span class="string">&quot;http://localhost:8082/user/&quot;</span>+uid, User.class);</span><br></pre></td></tr></table></figure><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>Eureka能够自动注册并发现微服务，然后对服务的状态、信息进行集中管理，这样当我们需要获取其他服务的信息时，我们只需要向Eureka进行查询就可以了。</p><p>那么现在我们就来搭建一个Eureka服务器，只需要创建一个新的Maven项目即可，然后我们需要在父工程中添加一下SpringCloud的依赖，这里选用<code>2021.0.1</code>版本（Spring Cloud 最新的版本命名方式变更了，现在是 <em><strong>YEAR.x</strong></em> 这种命名方式，具体可以在官网查看：<a href="https://spring.io/projects/spring-cloud#learn%EF%BC%89%EF%BC%9A">https://spring.io/projects/spring-cloud#learn）：</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着我们为新创建的项目添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下载内容有点多，首次导入请耐心等待一下。</p><p>那么现在我们就来搭建一个Eureka服务器，只需要创建一个新的Maven项目即可，然后我们需要在父工程中添加一下SpringCloud的依赖，这里选用<code>2021.0.1</code>版本（Spring Cloud 最新的版本命名方式变更了，现在是 <em><strong>YEAR.x</strong></em> 这种命名方式，具体可以在官网查看：<a href="https://spring.io/projects/spring-cloud#learn%EF%BC%89%EF%BC%9A">https://spring.io/projects/spring-cloud#learn）：</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着我们为新创建的项目添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下载内容有点多，首次导入请耐心等待一下。</p><p>可以看到目前还没有任何的服务注册到Eureka，我们接着来配置一下我们的三个微服务，首先还是需要导入Eureka依赖（注意别导错了，名称里面有个starter的才是）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment"># 跟上面一样，需要指向Eureka服务端地址，这样才能进行注册</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka</span></span><br></pre></td></tr></table></figure><p>OK，无需在启动类添加注解，直接启动就可以了，然后打开Eureka的服务管理页面，可以看到我们刚刚开启的服务</p><p>可以看到<code>8082</code>端口上的服务器，已经成功注册到Eureka了，但是这个服务名称怎么会显示为UNKNOWN，我们需要修改一下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure><p>当我们的服务启动之后，会每隔一段时间跟Eureka发送一次心跳包，这样Eureka就能够感知到我们的服务是否处于正常运行状态。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2023/08/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2023/08/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="YAPI"><a href="#YAPI" class="headerlink" title="YAPI"></a>YAPI</h2><p>前后台分离开发中，我们前后台开发人员都需要遵循接口文档，所以接下来我们介绍一款撰写接口文档的平台。</p><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。</p><p>其官网地址：<a href="http://yapi.smart-xwork.cn/">http://yapi.smart-xwork.cn/</a></p><p>YApi主要提供了2个功能：</p><ul><li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息。</li><li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试。</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>我们的前端工程化是通过vue官方提供的脚手架Vue-cli来完成的，用于快速的生成一个Vue的项目模板。Vue-cli主要提供了如下功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><p>我们需要运行Vue-cli，需要依赖NodeJS，NodeJS是前端工程化依赖的环境。所以我们需要先安装NodeJS，然后才能安装Vue-cli</p><h2 id="创建第一个Vue项目"><a href="#创建第一个Vue项目" class="headerlink" title="创建第一个Vue项目"></a>创建第一个Vue项目</h2><p>环境准备好了，接下来我们需要通过Vue-cli创建一个vue项目，然后再学习一下vue项目的目录结构。Vue-cli提供了如下2种方式创建vue项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>图形化界面如下：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qod196.png"></p></li></ul><p>创建项目</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qptx6w.png"></p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qqc1o3.png"></p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qqvjgy.png"></p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qri1ov.png"></p><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p><p><img src="https://picdl.sunbangyan.cn/2023/08/13/qtpve7.png"></p><p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p><p><img src="https://picdl.sunbangyan.cn/2023/08/13/qtvzct.png"></p><p>其中我们平时开发代码就是在<strong>src目录</strong>下</p><h2 id="运行Vue项目"><a href="#运行Vue项目" class="headerlink" title="运行Vue项目"></a>运行Vue项目</h2><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）<img src="https://picdm.sunbangyan.cn/2023/08/13/que17y.png"></li></ul><ul><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可</p></li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>那么我们访问的首页是index.html，但是我们找到public&#x2F;index.html文件，打开之后发现，里面没有什么代码，但是能够呈现内容丰富的首页：如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/qzwadi.png"></p><p>我们自习观察发现，index.html的代码很简洁，但是浏览器所呈现的index.html内容却很丰富，代码和内容不匹配，所以vue是如何做到的呢？接下来我们学习一下vue项目的开发流程。</p><p>对于vue项目，index.html文件默认是引入了入口函数main.js文件，我们找到<strong>src&#x2F;main.js</strong>文件，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>来到<strong>public&#x2F;index.html</strong>中，我们<strong>删除div的id&#x3D;app属性</strong>，打开浏览器，发现之前访问的首页一片空白，如下图所示，这样就证明了，我们main.js中通过代码挂在到index.html的id&#x3D;app的标签区域的。</p><p>此时我们知道了vue创建的dom对象挂在到id&#x3D;app的标签区域，但是我们还是没有解决最开始的问题：首页内容如何呈现的？这就涉及到render中的App了，如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/r0fn52.png"></p><p>那么这个App对象怎么回事呢，我们打开App.vue,注意的是.vue结尾的都是vue组件。而vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><p>如下图所示就是一个vue组件的小案例：</p><p><img src="https://picss.sunbangyan.cn/2023/08/13/r0zu50.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公共字段自动填充</title>
      <link href="/2023/08/05/%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/"/>
      <url>/2023/08/05/%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h1><p>使用springboot框架</p><p>在你需要自动填充的属性上加入注解如下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入时填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="comment">//更新时填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line"><span class="comment">//插入和更新时填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br></pre></td></tr></table></figure><p>接着我们需要创建一个类实现MetaObjectHandler这个类并加上@Component这个注解让这个类交给spring来管理</p><p>接着在这个类里实现insertFill()和updateFill()两个方法这个方法里写入你想设定的值即可完成自动注入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element</title>
      <link href="/2023/07/22/Element/"/>
      <url>/2023/07/22/Element/</url>
      
        <content type="html"><![CDATA[<h1 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h1><p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。</p><p>Element 提供了很多组件（组成网页的部件）供我们使用。例如 超链接、按钮、图片、表格等等。</p><p>官网地址：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>首先我们要掌握ElementUI的快速入门，接下来同学们就一起跟着步骤来操作一下。</p><p>首先，我们先要安装ElementUI的组件库，打开VS Code，停止之前的项目，然后在命令行输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui@2.15.3 </span><br></pre></td></tr></table></figure><p>具体操作如下图所示：</p><p><img src="https://picdl.sunbangyan.cn/2023/08/13/rg27ww.png"></p><p>然后我们需要在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="https://picdl.sunbangyan.cn/2023/08/13/s48f87.png"></p><p>然后我们需要按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/s4rpvc.png"></p><p>最后我们只需要去ElementUI的官网，找到组件库，然后找到按钮组件，抄写代码即可，具体操作如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/s4yga5.png"></p><p>然后找到按钮的代码，如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/s5fm82.png"></p><p>紧接着我们复制组件代码到我们的vue组件文件中，操作如下图所示：</p><p><img src="https://picss.sunbangyan.cn/2023/08/13/s5lgdr.png"></p><p>最后，我们需要在默认访问的根组件<strong>src&#x2F;App.vue</strong>中引入我们自定义的组件，具体操作步骤如下：</p><p><img src="https://picdl.sunbangyan.cn/2023/08/13/s60hn2.png"></p><p>然后App.vue组件中的具体代码如下，<strong>代码是我们通过上述步骤引入element-view组件时自动生成的</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element-view</span>&gt;</span><span class="tag">&lt;/<span class="name">element-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ElementView</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Element/ElementView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">ElementView</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行我们的vue项目，浏览器直接访问之前的7000端口，展示效果如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/s67foe.png"></p><h2 id="组件属性详解"><a href="#组件属性详解" class="headerlink" title="组件属性详解"></a>组件属性详解</h2><p>那么我们的ElementUI是如何将数据模型绑定到视图的呢？主要通过如下几个属性：</p><ul><li>data: 主要定义table组件的数据模型</li><li>prop: 定义列的数据应该绑定data中定义的具体的数据模型</li><li>label: 定义列的标题</li><li>width: 定义列的宽度</li></ul><p><img src="https://picst.sunbangyan.cn/2023/08/13/si1z1i.png"></p><p><strong>PS:Element组件的所有属性都可以在组件页面的最下方找到</strong>，如下图所示：</p><p><img src="https://picdm.sunbangyan.cn/2023/08/13/sihi7l.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 组件 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2023/07/20/Ajax/"/>
      <url>/2023/07/20/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>Ajax: 全称Asynchronous JavaScript And XML，异步的JavaScript和XML。其作用有如下2点：</p><ul><li>与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>针对于上述Ajax的局部刷新功能是因为Ajax请求是异步的，与之对应的有同步请求。接下来我们介绍一下异步请求和同步请求的区别。</p><ul><li>同步请求发送过程如下图所示：</li></ul><p><img src="https://img1.imgtp.com/2023/08/13/VoJK3yXM.png" alt="1691906434543.png"></p><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </p><ul><li>异步请求发送过程如下图所示：</li></ul><p><img src="https://img1.imgtp.com/2023/08/13/2VidHp6J.png" alt="1691906484147.png"></p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p><h2 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 创建XMLHttpRequest </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xmlHttpRequest  = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 发送异步请求</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://192.168.229.1:8080/hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="title function_">send</span>();<span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 获取服务响应数据</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//此处判断 4表示浏览器已经完全接受到Ajax请求得到的响应， 200表示这是一个正确的Http请求，没有错误</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">innerHTML</span> = xmlHttpRequest.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出原生Ajax较为繁琐</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>Axios对原生Ajax进行了封装，简化开发。<a href="https://www.axios-http.cn/">Axios官网</a></p><p>Axios的使用比较简单，主要分为2步：</p><ul><li><p>引入Axios文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种，如下</p><ul><li><p>发送 get 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发送 post 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li>method属性：用来设置请求方式的。取值为 get 或者 post。</li><li>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</li><li>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</li></ul><p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p><p>请求还可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;).then((result) =&gt; &#123;</span><br><span class="line">    console.log(result.data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.post(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;,&quot;id=1&quot;).then((result) =&gt; &#123;</span><br><span class="line">    console.log(result.data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Cache框架的应用</title>
      <link href="/2023/07/13/Spring-Cache%E6%A1%86%E6%9E%B6%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/07/13/Spring-Cache%E6%A1%86%E6%9E%B6%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cache框架的应用"><a href="#Spring-Cache框架的应用" class="headerlink" title="Spring-Cache框架的应用"></a>Spring-Cache框架的应用</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-cache默认情况下使用的是ConcurrentHashMap作为缓存，在我们导入Redis依赖后spring会自动为我们配置为以Redis作为缓存。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启缓存注解功能，写在springBoot项目的启动类即Application上</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据若没有数据，调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="meta">@Cacheable</span></span><br><span class="line"><span class="comment">//将方法的返回值放到缓存中</span></span><br><span class="line"><span class="meta">@CachePut</span></span><br><span class="line"><span class="comment">//将一条或多条数据从缓存中删除</span></span><br><span class="line"><span class="meta">@CacheEvict</span></span><br></pre></td></tr></table></figure><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><p>下面介绍一下 <code>@Cacheable </code>这个注解常用的几个属性：</p><ul><li><code>cacheNames/value</code> ：用来指定缓存组件的名字</li><li><code>key</code> ：缓存数据时使用的 key，可以用它来指定。默认是使用方法参数的值。（这个 key 你可以使用 spEL 表达式来编写）</li><li><code>keyGenerator</code> ：key 的生成器。 key 和 keyGenerator 二选一使用</li><li><code>cacheManager</code> ：可以用来指定缓存管理器。从哪个缓存管理器里面获取缓存。</li><li><code>condition</code> ：可以用来指定符合条件的情况下才缓存</li><li><code>unless</code> ：否定缓存。当 unless 指定的条件为 true ，方法的返回值就不会被缓存。当然你也可以获取到结果进行判断。（通过 <code>#result</code> 获取方法结果）</li><li><code>sync</code> ：是否使用异步模式。</li></ul><h4 id="cacheNames"><a href="#cacheNames" class="headerlink" title="cacheNames"></a><code>cacheNames</code></h4><p>用来指定缓存组件的名字，将方法的返回结果放在哪个缓存中，可以是数组的方式，支持指定多个缓存。</p><p><img src="https://pic3.zhimg.com/80/v2-3b7d283e5b20a115a945fdc6b5a9f126_720w.webp" alt="img"></p><h4 id="key"><a href="#key" class="headerlink" title="key"></a><code>key</code></h4><p>缓存数据时使用的 key。默认使用的是方法参数的值。可以使用 spEL 表达式去编写。</p><p><img src="https://pic4.zhimg.com/80/v2-4f78c9006bd4b1d1c8edc28980ece9b7_720w.webp" alt="img"></p><h4 id="keyGenerator"><a href="#keyGenerator" class="headerlink" title="keyGenerator"></a><code>keyGenerator</code></h4><p>key 的生成器，可以自己指定 key 的生成器，通过这个生成器来生成 key。</p><p><img src="https://pic4.zhimg.com/80/v2-0551620b5d50a76973917d3c942a2d6f_720w.webp" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-2c5334fa43af6953168b030dc7f5b3bd_720w.webp" alt="img"></p><p>这样放入缓存中的 key 的生成规则就按照你自定义的 keyGenerator 来生成。不过需要注意的是：</p><p><code>@Cacheable </code>的属性，key 和 keyGenerator 使用的时候，一般二选一。</p><h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a><code>condition</code></h4><p>符合条件的情况下才缓存。方法返回的数据要不要缓存，可以做一个动态判断。</p><p><img src="https://pic1.zhimg.com/80/v2-a5c8c27b2d034d4704a0a4ec0477a0d4_720w.webp" alt="img"></p><h4 id="unless"><a href="#unless" class="headerlink" title="unless"></a><code>unless</code></h4><p>否定缓存。当 unless 指定的条件为 true ，方法的返回值就不会被缓存。</p><p><img src="https://pic1.zhimg.com/80/v2-242fd8496b00c31bb93e2975bc95fe28_720w.webp" alt="img"></p><h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a><code>sync</code></h4><p>是否使用异步模式。默认是方法执行完，以同步的方式将方法返回的结果存在缓存中。</p><h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><p>CachePut与Cacheable的属性类似，除了没有<code>sync</code></p><p><strong>@Cacheable 的逻辑是：查找缓存 - 有就返回 -没有就执行方法体 - 将结果缓存起来；</strong></p><p><strong>@CachePut 的逻辑是：执行方法体 - 将结果缓存起来；</strong></p><p><strong>所以 @Cacheable 适用于查询数据的方法，@CachePut 适用于更新数据的方法。</strong></p><h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><p>@CacheEvict 就是一个触发器，在每次调用被它注解的方法时，就会触发删除它指定的缓存的动作。跟 @Cacheable 和 @CachePut 一样，@CacheEvict 也要求指定一个或多个缓存，也指定自定义一的缓存解析器和 key 生成器，也支持指定条件（condition 参数）。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在application.yml文件中加入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br></pre></td></tr></table></figure><p>具体属性参照<a href="https://juejin.cn/post/7067090649245286408">1 分钟快速上手 Spring Cache</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+mybatis常用注解</title>
      <link href="/2023/07/08/springboot+mybatis%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/07/08/springboot+mybatis%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-mybatis常用注解"><a href="#springboot-mybatis常用注解" class="headerlink" title="springboot+mybatis常用注解"></a>springboot+mybatis常用注解</h1><p>说到spring当然是要了解spring的两大特性IoC和AOP了</p><h2 id="IoC和AOP"><a href="#IoC和AOP" class="headerlink" title="IoC和AOP"></a>IoC和AOP</h2><p>IoC英文全称Inversion of Control，即控制反转。简单理解：在原本JAVA开发中创建对象就是用new关键字来创建对象，这会导致对象的依赖关系非常复杂不好管理。而IoC就是将创建对象的权限放给spring，由spring统一管理。IoC容器：具有依赖注入功能的容器，IoC容器负责实例化、定位、配置应用程序中的对象并建立这些对象之间的依赖。</p><p>AOP英文全称Aspect-Oriented Programming，即面向切面编程。就是将重复的代码抽离出来放在一个类里集中管理如异常处理之类的，并且可以动态增加删减功能大大减少了程序员的重复工作。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>1、Dao层<br>全称为Data Access Object，负责于数据库进行联络，完成增删查改的功能。提供接口给Service层。</p><p>2、Service层<br>调用Dao层提供的接口，业务处理，为Controller层提供接口。</p><p>3、Controller层<br>负责请求转发，接收用户传来的参数，通过调用Service层提供的接口，实现将数据转发给Service层处理。接收Service的返回值，再转发给用户。<br>————————————————<br>版权声明：本文为CSDN博主「小绵杨Yancy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/ZHANGYANG_1109/article/details/121345697">https://blog.csdn.net/ZHANGYANG_1109/article/details/121345697</a></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>控制层注解，接收前端发起的请求并将任务传递给指定的Service进行数据处理，然后返回前端需要的数据。</p><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>这个注解相当于@Controller和@ResponseBody，@Controller返回的是一个字符串大多用于页面跳转，当然跳转代码得用JS在前端写，@RestController将返回一个对象，然后将这个对象转化成JSON字符串并返回这样前端就可以看到响应的JSON数据，即使前端没有对应的元素与之对应（这种情况大多是因为后端的实体类属性名与前端的属性名不同导致无法对应）。</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>服务层注解一般写Service层的代码大多先写一个XXXService interface接口继承IService这个接口，这个接口是MyBatisPlus的接口其中包含了一些对于数据库操作的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量保存以事务形式向数据库写入数据</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"> <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>接着谈Service之后我们需要写一个XXXServiceImpl类实现上述接口（也可以继承ServiceImpl这个MybatisPlus提供的类简化开发，如果上面的接口继承了IService，那下面也要继承ServiceImpl这个类，不然就自己重写那一堆方法），此类就是写主要业务逻辑的地方controller层通过调用Service层的方法实现数据处理。</p><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h3><p>Dao层注解是@Mapper，MybatisPlus提供了一个BaseMapper接口。Dao层就是用于与数据库进行联系的层，如果有特殊的查询需要也可以在Mapper层自己写一个方法用于执行定制的SQL语句Service层进行处理与返回的数据不仅是Controller层提供的也有Dao层提供的。Dao层通过与数据库的联络完成Service层所需要的增删改查工作。</p><h2 id="RequestMappering-“-xxx”"><a href="#RequestMappering-“-xxx”" class="headerlink" title="@RequestMappering(“&#x2F;xxx”)"></a>@RequestMappering(“&#x2F;xxx”)</h2><p>将HTTP请求映射到映射到Controller层。大多用于Controller层的类上用于分类请求，如果写了这个注解则这个Controller层的方法的请求都是带有这个路径的</p><p>其他注解还有@GetMappering,@PostMappering 等这些注解写在方法上，前端的请求路径自动与之匹配找到合适的Controller。</p><h2 id="ServletComponentScan"><a href="#ServletComponentScan" class="headerlink" title="@ServletComponentScan"></a>@ServletComponentScan</h2><p>在@SpringBootApplication注解的类（即spingboot的启动类）上使用@ServletComponentScan注解后,Servlet（控制器）、Filter（过滤器）、Listener（监听器）可以直接通过@WebServlet、@WebFilter、@WebListener注解自动注册到Spring容器中，无需其他代码。</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>将该类注册为spring的一个Bean交给Spring进行管理</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动注入，用于实例化一个Service然后操作这个Service下的方法</p><h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><p>首先导入依赖，在pom.xml文件的dependencies下写入并刷新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Mybatis设置，在 &#x2F;resources&#x2F;applicstion.yml中写入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#服务器端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span> <span class="comment">#驱动</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">url?xxx&amp;xxx</span></span><br><span class="line">      <span class="comment">#xxx表示连接条件，综述如下</span></span><br><span class="line"><span class="comment">#1、serverTimezone=Asia/Shanghai,即时区设置，上海时间即东八区，高版本的mysql需要设置为 GMT%2B8(GMT+8)</span></span><br><span class="line"><span class="comment">#2、useUnicode=true 使用unicode 编码</span></span><br><span class="line"><span class="comment">#3、characterEncoding=utf8 数据库连接字符集</span></span><br><span class="line"><span class="comment">#4、useSSL=false 是否使用 ssl</span></span><br><span class="line"><span class="comment">#5、tinyInt1isBit=true 转换为 tinyint(1) 转换为 boolean ,否则为 int</span></span><br><span class="line"><span class="comment">#6、allowMultiQueries=true 是否允许多行查询，在批量更新数据时，update 语句使用分号(;)进行连接，此时则需要配置运行多行查询。</span></span><br><span class="line"><span class="comment">#7、rewriteBatchedStatements=true 批处理时需要设置该参数，在mysql5.1.13以上版本才能使用，对 update/insert/delete 都可以生效。数据量大时，消耗时间 jdbc batch &lt; mybatis batch &lt; foreach 循环。</span></span><br><span class="line"><span class="comment">#8、useAffectedRows=true,默认为false。是否使用影响行数，默认为找的所有修改行数，即false。在update 的情况下，更新3条，如果只有两条有变化，则返回2(useAffectedRows=true),否则返回3.</span></span><br><span class="line"><span class="comment">#9、defaultFetchSize=10000 默认获取条数</span></span><br><span class="line"><span class="comment">#10、zeroDateTimeBehavior=convertToNull 默认时间转换为null,避免转换报错。0000-00-00 时间转换为 null </span></span><br><span class="line"></span><br><span class="line"><span class="string">作者：斜月</span></span><br><span class="line"><span class="string">链接：https://juejin.cn/post/7022925130477076487</span></span><br><span class="line"><span class="string">来源：稀土掘金</span></span><br><span class="line"><span class="string">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><p>MybatisPlus提供了相当丰富的操作数据库的方法，让我们基本告别SQL语句，用了就回不去了。</p><h3 id="LambdaQueryWrapper"><a href="#LambdaQueryWrapper" class="headerlink" title="LambdaQueryWrapper"></a>LambdaQueryWrapper</h3><p>这个类是一个支持Lambda表达式的条件构造器常用方法有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造条件构造器        </span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//eq匹配查询即SQL里的WHERE userId=xxx</span></span><br><span class="line">lambdaQueryWrapper.eq(User::getId,user.getId());</span><br><span class="line"><span class="comment">//根据ID降序排列</span></span><br><span class="line">lambdaQueryWrapper.orderByDesc(user.getId());</span><br><span class="line"><span class="comment">//相似查询</span></span><br><span class="line">lambdaQueryWrapper.like()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习笔记</title>
      <link href="/2023/07/06/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/06/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="redis学习笔记"><a href="#redis学习笔记" class="headerlink" title="redis学习笔记"></a>redis学习笔记</h1><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>windows版本在github上下载<a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski&#x2F;redis (github.com)</a></p><p>下载zip压缩包直接解压即可，运行redis-server.exe发现报错</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">15664</span>] <span class="number">30</span> <span class="string">Jun</span> <span class="number">15</span><span class="string">:34:04.314</span> <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">[<span class="number">15664</span>] <span class="number">30</span> <span class="string">Jun</span> <span class="number">15</span><span class="string">:34:04.314</span> <span class="comment"># Redis version=5.0.14.1, bits=64, commit=ec77f72d, modified=0, pid=15664, just started</span></span><br><span class="line">[<span class="number">15664</span>] <span class="number">30</span> <span class="string">Jun</span> <span class="number">15</span><span class="string">:34:04.314</span> <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use d:\redis-x64-5.0.14.1\redis-server.exe /path/to/redis.conf</span></span><br></pre></td></tr></table></figure><p>这是因为配置文件没有加载导致的在当前文件夹路径输入cmd打开输入下面指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure><p>当前命令即为redis加载当前目录下的默认配置文件redis.windows.conf</p><p>成功启动服务器接着打开redis-cli.exe进行操作数据库</p><h2 id="基础数据操作"><a href="#基础数据操作" class="headerlink" title="基础数据操作"></a>基础数据操作</h2><p>切换数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select num</span><br></pre></td></tr></table></figure><p>redis默认自带了16个数据库通过0，1，2等数值进行切换</p><h3 id="键值对操作"><a href="#键值对操作" class="headerlink" title="键值对操作"></a>键值对操作</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> key <span class="keyword">value</span></span><br><span class="line"><span class="comment">-- 一次添加多个键值对</span></span><br><span class="line">mset key1 value1 key2 value2 ...</span><br><span class="line"><span class="comment">-- redis还支持过期时间设置</span></span><br><span class="line"><span class="keyword">set</span> key <span class="keyword">value</span> ex<span class="operator">|</span>px num <span class="comment">-- ex 秒 px 毫秒</span></span><br><span class="line"><span class="comment">-- 单独为键值对设置过期时间</span></span><br><span class="line">expire key ex<span class="operator">|</span>px num <span class="comment">-- ex 秒 px 毫秒</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key1 key2 ...</span><br></pre></td></tr></table></figure><h4 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> key</span><br></pre></td></tr></table></figure><h4 id="查询过期时间"><a href="#查询过期时间" class="headerlink" title="查询过期时间"></a>查询过期时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ttl key <span class="comment">-- 秒</span></span><br><span class="line">pttl key <span class="comment">-- 毫秒</span></span><br><span class="line">persist key <span class="comment">-- 转成永久</span></span><br></pre></td></tr></table></figure><h4 id="查询数据库所有键"><a href="#查询数据库所有键" class="headerlink" title="查询数据库所有键"></a>查询数据库所有键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys <span class="operator">*</span></span><br></pre></td></tr></table></figure><h4 id="随机取一个键"><a href="#随机取一个键" class="headerlink" title="随机取一个键"></a>随机取一个键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randomkey</span><br></pre></td></tr></table></figure><h4 id="查看值的数据类型"><a href="#查看值的数据类型" class="headerlink" title="查看值的数据类型"></a>查看值的数据类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>hash类型就类似JAVA里的map的值又套了一层map，指令上就是在原本的指令前加一个h</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- set</span></span><br><span class="line">hset key inkey1 value1 inkey2 value2 ...</span><br><span class="line"><span class="comment">-- get</span></span><br><span class="line">hget key inkey</span><br><span class="line">hgetall key <span class="comment">-- 获得键里的所有键值对</span></span><br><span class="line"><span class="comment">-- 判断是否存在</span></span><br><span class="line">hexists key </span><br><span class="line"><span class="comment">-- 删除键以及里面的所有值</span></span><br><span class="line">hdel key</span><br><span class="line"><span class="comment">-- 获取所有字段的值</span></span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>List顾名思义是一个列表，也就是说一个键里存放多个字符串。类似JAVA里的LinkedList</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向列表头部添加元素</span></span><br><span class="line">lpush key element...</span><br><span class="line"><span class="comment">-- 向列表尾部添加元素</span></span><br><span class="line">rpush key element...</span><br><span class="line"><span class="comment">-- 在指定元素前面/后面插入元素</span></span><br><span class="line">linsert key before<span class="operator">/</span>after <span class="operator">&lt;</span>指定元素<span class="operator">&gt;</span> <span class="operator">&lt;</span>element<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 根据下标获取元素</span></span><br><span class="line">lindex key <span class="operator">&lt;</span>下标<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 获取并移除头部元素</span></span><br><span class="line">lpop key</span><br><span class="line"><span class="comment">-- 获取并移除尾部元素</span></span><br><span class="line">rpop key</span><br><span class="line"><span class="comment">-- 获取指定范围内的</span></span><br><span class="line">lrange key <span class="keyword">start</span> stop</span><br><span class="line"><span class="comment">-- 获取列表a中的全部元素</span></span><br><span class="line">lrange a <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="comment">-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素</span></span><br><span class="line">rpoplpush 当前数组 目标数组</span><br><span class="line"><span class="comment">-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行pop操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行</span></span><br><span class="line">blpop key... timeout</span><br></pre></td></tr></table></figure><h4 id="Set和SortedSet"><a href="#Set和SortedSet" class="headerlink" title="Set和SortedSet"></a>Set和SortedSet</h4><p>Set类似HashSet即不允许存在相同元素且不是按照插入顺序排序，它是一个无序的集合允许有空值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line">sadd key value1 value2 ...</span><br><span class="line"><span class="comment">-- 查询有多少个值</span></span><br><span class="line">scard key</span><br><span class="line"><span class="comment">-- -- 是否包含指定值</span></span><br><span class="line">sismember key <span class="keyword">value</span></span><br><span class="line"><span class="comment">-- 列出所有值</span></span><br><span class="line">smembers key</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有更多指令，提供学习网址<a href="https://www.jianshu.com/p/32b9fe8c20e1">https://www.jianshu.com/p/32b9fe8c20e1</a></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>将已存储的数据直接保存为rdb文件到硬盘上，需要恢复时直接读取即可。我们可以用命令让它保存</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save</span><br><span class="line"><span class="comment">-- 注意上面这个命令是直接保存，会占用一定的时间，也可以单独开一个子进程后台执行保存</span></span><br><span class="line">bgsave</span><br></pre></td></tr></table></figure><p>完成后会在服务端目录下生成一个dump.rdb文件用于保存数据</p><p>也可以在配置文件中修改自动保存的逻辑：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">300</span> <span class="number">10</span> # <span class="number">300</span>秒（<span class="number">5</span>分钟）内有<span class="number">10</span>个写入</span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> # <span class="number">60</span>秒（<span class="number">1</span>分钟）内有<span class="number">10000</span>个写入</span><br></pre></td></tr></table></figure><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>这种持久化的方式是保存数据存放的所有过程即命令，需要恢复时再重新运行一次</p><p>配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 注意得改成yes</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 每次执行写操作都会保存一次</span></span><br><span class="line"># appendfsync always</span><br><span class="line"><span class="comment">-- 每秒保存一次（默认配置）</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment">-- 系统决定</span></span><br><span class="line"># appendfsync <span class="keyword">no</span></span><br></pre></td></tr></table></figure><p>Redis有个AOF重写优化比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lpush test <span class="number">666</span></span><br><span class="line">lpush test <span class="number">777</span></span><br><span class="line">lpush test <span class="number">888</span></span><br></pre></td></tr></table></figure><p>转换为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush test <span class="number">666</span> <span class="number">777</span> <span class="number">888</span></span><br></pre></td></tr></table></figure><p>我们可以通过命令手动执行重写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 百分比计算，这里不多介绍</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"># 当达到这个大小时，触发自动重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><h3 id="RDB和AOF的优缺点"><a href="#RDB和AOF的优缺点" class="headerlink" title="RDB和AOF的优缺点"></a>RDB和AOF的优缺点</h3><ul><li>AOF：<ul><li>优点：存储速度快、消耗资源少、支持实时存储</li><li>缺点：加载速度慢、数据体积大</li></ul></li><li>RDB：<ul><li>优点：加载速度快、数据体积小</li><li>缺点：存储速度慢大量消耗资源、会发生数据丢失</li></ul></li></ul><h2 id="事务与锁"><a href="#事务与锁" class="headerlink" title="事务与锁"></a>事务与锁</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line">multi</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">exec</span></span><br><span class="line"><span class="comment">-- 中途取消事务</span></span><br><span class="line">discard</span><br></pre></td></tr></table></figure><p>Redis中的事务与MySql中的不同，Redis是将事务中的命令存放在一个事务队列中，提交后再执行。而MySql是在隔离环境中直接执行命令。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>同样在Redis中锁的机制与MySql也不相同Redis是一种乐观锁而MySql是一种悲观锁</p><ul><li>悲观锁：时刻认为别人会来抢占资源，禁止一切外来访问，直到释放锁，具有强烈的排他性质。</li><li>乐观锁：并不认为会有人来抢占资源，所以会直接对数据进行操作，在操作时再去验证是否有其他人抢占资源。</li></ul><p>Redis中可以使用watch来监视一个目标，如果执行事务之前被监视目标发生了修改，则取消本次事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 监控一个资源</span></span><br><span class="line">watch</span><br><span class="line"><span class="comment">-- 取消监控</span></span><br><span class="line">unwatch</span><br></pre></td></tr></table></figure><h2 id="Java与Redis交互"><a href="#Java与Redis交互" class="headerlink" title="Java与Redis交互"></a>Java与Redis交互</h2><p>导入Jedis框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建Jedis对象</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">  </span><br><span class="line">    jedis.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//使用之后关闭连接</span></span><br><span class="line">  jedis.close();</span><br><span class="line">    <span class="comment">//也可以使用Try-with-resources语法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  <span class="comment">#Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.3</span></span><br><span class="line">    <span class="comment">#端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#使用几号数据库</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这个依赖为我们提供了两个模版’string-string’和’Object-Object’分别为’StringRedisTemplate’和’RedisTemplate’两个类，自动注入后即可使用。</p><h2 id="实现使用Redis做缓存"><a href="#实现使用Redis做缓存" class="headerlink" title="实现使用Redis做缓存"></a>实现使用Redis做缓存</h2><h3 id="Mybatis二级缓存"><a href="#Mybatis二级缓存" class="headerlink" title="Mybatis二级缓存"></a>Mybatis二级缓存</h3><p>我们需要手动实现Mybatis提供的Cache接口，这里我们简单编写一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Mybatis的Cache接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisMybatisCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//注意构造方法必须带一个String类型的参数接收id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisMybatisCache</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化时通过配置类将RedisTemplate给过来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTemplate</span><span class="params">(RedisTemplate&lt;Object, Object&gt; template)</span> &#123;</span><br><span class="line">        RedisMybatisCache.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, Object o1)</span> &#123;</span><br><span class="line">      <span class="comment">//这里直接向Redis数据库中丢数据即可，o就是Key，o1就是Value，60秒为过期时间</span></span><br><span class="line">        template.opsForValue().set(o, o1, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="comment">//这里根据Key直接从Redis数据库中获取值即可</span></span><br><span class="line">        <span class="keyword">return</span> template.opsForValue().get(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="comment">//根据Key删除</span></span><br><span class="line">        <span class="keyword">return</span> template.delete(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//由于template中没封装清除操作，只能通过connection来执行</span></span><br><span class="line">template.execute((RedisCallback&lt;Void&gt;) connection -&gt; &#123;</span><br><span class="line">          <span class="comment">//通过connection对象执行清空操作</span></span><br><span class="line">            connection.flushDb();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//这里也是使用connection对象来获取当前的Key数量</span></span><br><span class="line">        <span class="keyword">return</span> template.execute(RedisServerCommands::dbSize).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存类编写完成后，我们接着来编写配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//把RedisTemplate给到RedisMybatisCache</span></span><br><span class="line">        RedisMybatisCache.setTemplate(template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们在Mapper上启用此缓存即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要修改缓存实现类implementation为我们的RedisMybatisCache即可</span></span><br><span class="line"><span class="meta">@CacheNamespace(implementation = RedisMybatisCache.class)</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select name from student where sid = 1&quot;)</span></span><br><span class="line">    String <span class="title function_">getSid</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们提供一个测试用例来查看当前的二级缓存是否生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MainMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(mapper.getSid());</span><br><span class="line">        System.out.println(mapper.getSid());</span><br><span class="line">        System.out.println(mapper.getSid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动使用客户端查看Redis数据库，可以看到已经有一条Mybatis生成的缓存数据了。</p><h3 id="Token持久化存储"><a href="#Token持久化存储" class="headerlink" title="Token持久化存储"></a>Token持久化存储</h3><p>我们之前使用SpringSecurity时，remember-me的Token是支持持久化存储的，而我们当时是存储在数据库中，那么Token信息能否存储在缓存中呢，当然也是可以的，我们可以手动实现一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现PersistentTokenRepository接口</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTokenRepository</span> <span class="keyword">implements</span> <span class="title class_">PersistentTokenRepository</span> &#123;</span><br><span class="line">  <span class="comment">//Key名称前缀，用于区分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REMEMBER_ME_KEY</span> <span class="operator">=</span> <span class="string">&quot;spring:security:rememberMe:&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createNewToken</span><span class="params">(PersistentRememberMeToken token)</span> &#123;</span><br><span class="line">      <span class="comment">//这里要放两个，一个存seriesId-&gt;Token，一个存username-&gt;seriesId，因为删除时是通过username删除</span></span><br><span class="line">        template.opsForValue().set(REMEMBER_ME_KEY+<span class="string">&quot;username:&quot;</span>+token.getUsername(), token.getSeries());</span><br><span class="line">        template.expire(REMEMBER_ME_KEY+<span class="string">&quot;username:&quot;</span>+token.getUsername(), <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        <span class="built_in">this</span>.setToken(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//先获取，然后修改创建一个新的，再放入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateToken</span><span class="params">(String series, String tokenValue, Date lastUsed)</span> &#123;</span><br><span class="line">        <span class="type">PersistentRememberMeToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">this</span>.getToken(series);</span><br><span class="line">        <span class="keyword">if</span>(token != <span class="literal">null</span>)</span><br><span class="line">           <span class="built_in">this</span>.setToken(<span class="keyword">new</span> <span class="title class_">PersistentRememberMeToken</span>(token.getUsername(), series, tokenValue, lastUsed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PersistentRememberMeToken <span class="title function_">getTokenForSeries</span><span class="params">(String seriesId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getToken(seriesId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过username找seriesId直接删除这两个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeUserTokens</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">series</span> <span class="operator">=</span> (String) template.opsForValue().get(REMEMBER_ME_KEY+<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        template.delete(REMEMBER_ME_KEY+series);</span><br><span class="line">        template.delete(REMEMBER_ME_KEY+<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//由于PersistentRememberMeToken没实现序列化接口，这里只能用Hash来存储了，所以单独编写一个set和get操作</span></span><br><span class="line">    <span class="keyword">private</span> PersistentRememberMeToken <span class="title function_">getToken</span><span class="params">(String series)</span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; map = template.opsForHash().entries(REMEMBER_ME_KEY+series);</span><br><span class="line">        <span class="keyword">if</span>(map.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersistentRememberMeToken</span>(</span><br><span class="line">                (String) map.get(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">                (String) map.get(<span class="string">&quot;series&quot;</span>),</span><br><span class="line">                (String) map.get(<span class="string">&quot;tokenValue&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Date</span>(Long.parseLong((String) map.get(<span class="string">&quot;date&quot;</span>))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setToken</span><span class="params">(PersistentRememberMeToken token)</span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>, token.getUsername());</span><br><span class="line">        map.put(<span class="string">&quot;series&quot;</span>, token.getSeries());</span><br><span class="line">        map.put(<span class="string">&quot;tokenValue&quot;</span>, token.getTokenValue());</span><br><span class="line">        map.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;&quot;</span>+token.getDate().getTime());</span><br><span class="line">        template.opsForHash().putAll(REMEMBER_ME_KEY+token.getSeries(), map);</span><br><span class="line">        template.expire(REMEMBER_ME_KEY+token.getSeries(), <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着把验证Service实现了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> mapper.getAccountByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> User</span><br><span class="line">                .withUsername(username)</span><br><span class="line">                .password(account.getPassword())</span><br><span class="line">                .roles(account.getRole())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper也安排上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace(implementation = MybatisRedisCache.class)</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    Account <span class="title function_">getAccountByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后配置文件配一波：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            .tokenRepository(repository);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    auth</span><br><span class="line">            .userDetailsService(service)</span><br><span class="line">            .passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，启动服务器验证一下吧。</p><h2 id="三大缓存问题"><a href="#三大缓存问题" class="headerlink" title="三大缓存问题"></a>三大缓存问题</h2><p>虽然我们可以利用缓存来大幅度提升我们程序的数据获取效率，但是使用缓存也存在着一些潜在的问题。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><img src="https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1004.png?x-oss-process=style/shuiyin" alt="img"></p><p>当我们去查询一个一定不存在的数据，比如Mybatis在缓存是未命中的情况下需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p>这显然是很浪费资源的，我们希望的是，如果这个数据不存在，为什么缓存这一层不直接返回空呢，这时就不必再去查数据库了，但是也有一个问题，缓存不去查数据库怎么知道数据库里面到底有没有这个数据呢？</p><p>这时我们就可以使用布隆过滤器来进行判断。什么是布隆过滤器？（当然不是打辅助的那个布隆，只不过也挺像，辅助布隆也是挡子弹的）</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201903%2F20190321142642446276.png&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644902390&t=4f0440b0357965ead1fa34fb27513927" alt="点击查看图片来源"></p><p>使用布隆过滤器，能够告诉你某样东西一定不存在或是某样东西可能存在。</p><p>布隆过滤器本质是一个存放二进制位的bit数组，如果我们要添加一个值到布隆过滤器中，我们需要使用N个不同的哈希函数来生成N个哈希值，并对每个生成的哈希值指向的bit位置1，如上图所示，一共添加了三个值abc。</p><p>接着我们给一个d，那么这时就可以进行判断，如果说d计算的N个哈希值的位置上都是1，那么就说明d可能存在；这时候又来了个e，计算后我们发现有一个位置上的值是0，这时就可以直接断定e一定不存在。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><img src="https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1005.png?x-oss-process=style/shuiyin" alt="img"></p><p>某个 Key 属于热点数据，访问非常频繁，同一时间很多人都在访问，在这个Key失效的瞬间，大量的请求到来，这时发现缓存中没有数据，就全都直接请求数据库，相当于击穿了缓存屏障，直接攻击整个系统核心。</p><p>这种情况下，最好的解决办法就是不让Key那么快过期，如果一个Key处于高频访问，那么可以适当地延长过期时间。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><img src="https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1006.png?x-oss-process=style/shuiyin" alt="img"></p><p>当你的Redis服务器炸了或是大量的Key在同一时间过期，这时相当于缓存直接GG了，那么如果这时又有很多的请求来访问不同的数据，同一时间内缓存服务器就得向数据库大量发起请求来重新建立缓存，很容易把数据库也搞GG。</p><p>解决这种问题最好的办法就是设置高可用，也就是搭建Redis集群，当然也可以采取一些服务熔断降级机制</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> NoSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖开发笔记</title>
      <link href="/2023/07/06/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/06/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数据库建立：reggie-字符格式-utf8mb4（小写）"><a href="#1-数据库建立：reggie-字符格式-utf8mb4（小写）" class="headerlink" title="1.数据库建立：reggie 字符格式 utf8mb4（小写）"></a>1.数据库建立：reggie 字符格式 utf8mb4（小写）</h3><h3 id="2-spring项目建立：JDK11"><a href="#2-spring项目建立：JDK11" class="headerlink" title="2.spring项目建立：JDK11"></a>2.spring项目建立：JDK11</h3><h3 id="3-因数据库命名规范与JAVA不同，所以在往外导数据时修改命名格式，即改为驼峰命名"><a href="#3-因数据库命名规范与JAVA不同，所以在往外导数据时修改命名格式，即改为驼峰命名" class="headerlink" title="3.因数据库命名规范与JAVA不同，所以在往外导数据时修改命名格式，即改为驼峰命名"></a>3.因数据库命名规范与JAVA不同，所以在往外导数据时修改命名格式，即改为驼峰命名</h3><p>​在spring配置文件中加入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> <span class="comment">#注意此行与spring标签同级</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><h3 id="4-配置数据源"><a href="#4-配置数据源" class="headerlink" title="4.配置数据源"></a>4.配置数据源</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span> <span class="comment">#在spring标签下一级</span></span><br><span class="line"><span class="attr">druid:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">  <span class="comment">#好像是mybatis的特色URL配置（不懂）</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><h3 id="5-包的分配"><a href="#5-包的分配" class="headerlink" title="5.包的分配"></a>5.包的分配</h3><p>com.example</p><p>​common（通用的类存在此包：通用的返回结构类**,**服务端响应的数据都会封装成此对象）</p><p>​config（配置类的包）</p><p>​controller（控制层）</p><p>​entity（实体类）</p><p>​mapper（数据库映射）</p><p>​service（服务层：通常写结构交给下一级包中的实现类实现）</p><p>​impl（服务实现层）</p><p>resource（静态资源）</p><p>​backend(后端，即商家用户使用的网页)</p><p>​front（前端，即消费者使用的购物网页）</p><h3 id="6-静态资源配置"><a href="#6-静态资源配置" class="headerlink" title="6.静态资源配置"></a>6.静态资源配置</h3><p>在WEB配置类中写入一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-mybatisPlus的应用"><a href="#7-mybatisPlus的应用" class="headerlink" title="7.mybatisPlus的应用"></a>7.mybatisPlus的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br></pre></td></tr></table></figure><p>Wapper:条件构造器</p><p>​QueryWapper：查询条件构造器</p><p>​LambdaQueryWapper：引入lambda表达式的查询条件构造器</p><p>eq（A，B）A字段 &#x3D; B？</p><p><img src="https://img-blog.csdnimg.cn/20210518172357678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FsencxOTkw,size_16,color_FFFFFF,t_70#pic_center" alt="tupiao alter"></p><p>实体类中还应用了没讲</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br></pre></td></tr></table></figure><p>mapper接口中这样写就直接可以使用BaseMapper中的方法省略Sql语句</p><p>@Mapper注解是注册为Mapper 的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口继承IService泛型填入映射的实体类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>serviceimpl实现继承ServiceImpl泛型填入实体类的mapper和实体类</p><p>@Service自动注入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用该service的时候只需要将该类注入接口中即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br></pre></td></tr></table></figure><p>（在controller控制层调用的）</p><h2 id="MVC映射"><a href="#MVC映射" class="headerlink" title="MVC映射"></a>MVC映射</h2><p><img src="https://img-blog.csdnimg.cn/231609cbbe4f4558acbcc2a36c443af7.png" alt="映射流程"></p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript学习笔记</title>
      <link href="/2023/07/05/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/05/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h2><p>将JS代码定义在html页面内的<script></script>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h2><p>将JS代码定义在外部JS文件中，然后引入到HTML页面中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jsStudy.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//浏览器弹出警告框</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/08/AZ3dgeZ8.png" alt="1691480449050.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//写入HTML，在浏览器展示</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/08/lfJHYOzu.png" alt="1691480550773.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//写入浏览器控制台</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/08/tEBKQmsR.png" alt="1691480650677.png"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>JS</strong>是弱类型语言，变量可以存放不同类型的值</p><ul><li><p><strong>var</strong>：声明变量，全局作用域&#x2F;函数作用域，允许重复声明</p></li><li><p><strong>let</strong>：声明变量，块级作用域，不允许重复声明</p></li><li><p><strong>const</strong>：声明常量，一旦声明，常量的值不能改变</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript中分为：原始类型和引用类型</p><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><ul><li><p>number：数字（整数、小数、NaN(Not a Number)）</p></li><li><p>string：字符串，单双引皆可</p></li><li><p>boolean：布尔。true，false</p></li><li><p>null：对象为空</p></li><li><p>undefined：当声明的变量未初始化时，该变量的默认值是 undefined</p></li></ul><p>使用typeof运算符可以获取数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="title function_">alter</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure><h3 id="和"><a href="#和" class="headerlink" title="&#x3D;&#x3D;&#x3D;和&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;和&#x3D;&#x3D;</h3><p>&#x3D;&#x3D;会进行类型转换，&#x3D;&#x3D;&#x3D;不会进行类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alter</span>(a == <span class="string">&quot;10&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alter</span>(a === <span class="string">&quot;10&quot;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="title function_">alter</span>(a === <span class="number">10</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="字符串类型转为数字："><a href="#字符串类型转为数字：" class="headerlink" title="字符串类型转为数字："></a>字符串类型转为数字：</h4><ul><li>将字符串字面值转为数字。 如果字面值不是数字，则转为NaN。</li></ul><h4 id="其他类型转为boolean："><a href="#其他类型转为boolean：" class="headerlink" title="其他类型转为boolean："></a>其他类型转为boolean：</h4><ul><li><p>Number：0 和 NaN为false，其他均转为true。</p></li><li><p>String：空字符串为false，其他均转为true。</p></li><li><p>Null 和 undefined ：均转为false。</p></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JS使用function关键字定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">参数<span class="number">1</span> 参数<span class="number">2</span></span>)&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>形式参数不需要类型。因为JavaScript是弱类型语言</p></li><li><p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可</p></li></ul><p>定义方式二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="keyword">function</span>(<span class="params">参数</span>)&#123;</span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：JS中函数调用可以调用任意个数的参数</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>用来简化函数定义语法的：(…)&#x3D;&gt;{…}</p><p>如果需要给箭头函数起名字：var xxx &#x3D; (…)&#x3D;&gt;{…}</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayName = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> arrayName = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><p>JS中的数组相当于Java中的集合，数组的长度是可变的，而JS是弱类型，所以可以存储任意类型的数据.</p><p>属性：</p><ul><li>length：设置或返回数组中的元素的数量；</li></ul><p>方法：</p><ul><li>forEach()：遍历数组的每个有值的元素，并调用一次传入的函数</li><li>push()：将新元素添加到数组的末尾，并返回新的长度</li><li>splice()：从数组中删除元素</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>属性：</p><ul><li>length：字符串的长度</li></ul><p>方法：</p><ul><li>charAt()：返回在指定位置的字符</li><li>indexOf()：检索字符串</li><li>trim()：去除字符串两边的空格</li><li>subString()：提取字符串中两个指定的索引号之间的字符</li></ul><h2 id="JS自定义对象"><a href="#JS自定义对象" class="headerlink" title="JS自定义对象"></a>JS自定义对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">       <span class="attr">name</span>:<span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">       <span class="attr">sex</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">       <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>,</span><br><span class="line">       <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&quot;eating&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="title function_">drink</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alter</span>(<span class="string">&quot;drinking&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用：</p><p>对象名. 属性名;</p><p>对象名.函数名();</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>定义：</p><p>var 变量名 &#x3D; ‘{“key1”: value1, “key2”: value2}’;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON字符串转为JS对象</span></span><br><span class="line"><span class="keyword">var</span> jsObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(userStr);</span><br><span class="line"><span class="comment">//JS对象转为JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObject);</span><br></pre></td></tr></table></figure><p>value的数据类型为：u数字（整数或浮点数）</p><ul><li><p>字符串（在双引号中）</p></li><li><p>逻辑值（true 或 false）</p></li><li><p>数组（在方括号中）</p></li><li><p>对象（在花括号中）</p></li><li><p>null</p></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM：Browser Object Model 浏览器对象模型，允许JavaScript与浏览器对话， JavaScript 将浏览器的各个组成部分封装为对象。</p><p>组成：</p><ul><li><p>Window：浏览器窗口对象</p></li><li><p>Navigator：浏览器对象</p></li><li><p>Screen：屏幕对象</p></li><li><p>History：历史记录对象</p></li><li><p>Location：地址栏对象</p></li></ul><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>浏览器窗口对象，直接使用window，其中window.可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="title function_">alter</span>(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>属性：</p><ul><li>history：对History对象的只读引用。<a href="https://www.w3school.com.cn/jsref/dom_obj_history.asp">History 对象 (w3school.com.cn)</a></li><li>location：用于窗口或框架的Location对象。<a href="https://www.w3school.com.cn/jsref/dom_obj_location.asp">Location 对象 (w3school.com.cn)</a></li><li>navigator：对Navigator对象的只读引用。<a href="https://www.w3school.com.cn/jsref/dom_obj_navigator.asp">Navigator 对象 (w3school.com.cn)</a></li></ul><p>方法：</p><ul><li><p>alert()：显示带有一段消息和一个确认按钮的警告框。</p></li><li><p>confirm()：显示带有一段消息以及确认按钮和取消按钮的对话框。</p></li><li><p>setInterval()：按照指定的周期（以毫秒计）来调用函数或计算表达式。</p></li><li><p>setTimeout()：在指定的毫秒数后调用函数或计算表达式。</p></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>概念：Document Object Model ，文档对象模型。</p><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。 </p><p>Document对象中提供了以下获取Element元素对象的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id属性值获取，返回单个Element对象</span></span><br><span class="line"><span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="comment">//根据标签名称获取，返回Element对象数组</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//根据name属性值获取，返回Element对象数组</span></span><br><span class="line"><span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span><br><span class="line"><span class="comment">//根据class属性值获取，返回Element对象数组</span></span><br><span class="line"><span class="keyword">var</span> clss = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>方式一：通过 HTML标签中的事件属性进行绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;我被点击了！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：通过 DOM 元素属性绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;on&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;on&quot;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;我被点击了！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><table><thead><tr><th><strong>事件名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><img src="https://img1.imgtp.com/2023/08/08/HCeUG9dE.png" alt="1691503685689.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-事件-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点亮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;熄灭&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;off()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;lower()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;upper()&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reverse()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 点击 &quot;点亮&quot; 按钮, 点亮灯泡; 点击 &quot;熄灭&quot; 按钮, 熄灭灯泡; </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span>=<span class="string">&quot;img/on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">off</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span> = <span class="string">&quot;img/off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">lower</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">upper</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. 点击 &quot;全选&quot; 按钮使所有的复选框呈现选中状态 ; 点击 &quot;反选&quot; 按钮使所有的复选框呈现取消勾选的状态 ; -- onclick</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> element = hobbys[i];</span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> element = hobbys[i];</span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">checked</span>=element.<span class="property">checked</span> == <span class="literal">false</span> ? <span class="attr">true</span>:<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fatal unable to access ‘httpsgithub.comliuyibhexo-theme-stun.git‘ Failed connect to github.c</title>
      <link href="/2023/07/01/fatal%20unable%20to%20access%20%E2%80%98httpsgithub.comliuyibhexo-theme-stun.git%E2%80%98%20Failed%20connect%20to%20github.c/"/>
      <url>/2023/07/01/fatal%20unable%20to%20access%20%E2%80%98httpsgithub.comliuyibhexo-theme-stun.git%E2%80%98%20Failed%20connect%20to%20github.c/</url>
      
        <content type="html"><![CDATA[<p>github连接失败</p><p>先检查网络，在虚拟机使用指令<a href="https://so.csdn.net/so/search?q=ifconfig&spm=1001.2101.3001.7020">ifconfig</a>查询虚拟机ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>在本机cmd下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.6.131</span><br></pre></td></tr></table></figure><p> 本机连接虚拟机没有问题看虚拟机能不能连接本机</p><p>同理查看本机的IP地址，接着在虚拟机ping能否连接成功</p><p>连接成功，说明网络没有问题</p><p>下面我们检查是否是git代理的问题</p><p>git config –global http.proxy</p><p>取消http的代理，如果是https就把http.proxy改为https.proxy</p><p>完成之后就能正常访问了</p><p>但时不时还报443，重启一下</p><p>实在不行就用Gitee镜像到GitHub然后提交到gitee上这个连接稳定</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md文档编写规范</title>
      <link href="/2023/07/01/md%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/"/>
      <url>/2023/07/01/md%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># This is level 1 (article title)</span><br><span class="line">## This is level 2</span><br><span class="line">### This is level 3</span><br><span class="line">#### This is level 4</span><br><span class="line">##### This is level 5</span><br></pre></td></tr></table></figure><h2 id="基本文本"><a href="#基本文本" class="headerlink" title="基本文本"></a>基本文本</h2><p>加粗：<strong>blod</strong> ** XXX ** 去掉空格后回车</p><p>斜体：<strong>italic</strong> * xxx*</p><p>加粗斜体就是三个星号环绕 <em><strong>blod and italic</strong></em> *** xx x * * *</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This text is <span class="strong">**bold**</span>.</span><br><span class="line">This text is <span class="emphasis">*italic*</span>.</span><br><span class="line">This text is both <span class="strong">**<span class="emphasis">*bold and italic*</span>**</span>.</span><br></pre></td></tr></table></figure><h2 id="编号列表"><a href="#编号列表" class="headerlink" title="编号列表"></a>编号列表</h2><ol><li>xxx</li><li>xxx</li></ol><h3 id="符号列表"><a href="#符号列表" class="headerlink" title="符号列表"></a>符号列表</h3><p>使用 * + - 但要注意不能在同一列表中混合使用</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> Make sure that your table looks like this:</span><br><span class="line"></span><br><span class="line">   | Hello | World |</span><br><span class="line">   |---|---|</span><br><span class="line">   | How | are you? |</span><br></pre></td></tr></table></figure><table><thead><tr><th>column1</th><th>column 2</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> This is the fourth step.</span><br><span class="line"></span><br><span class="line">   &gt;[!NOTE]</span><br><span class="line">   &gt;</span><br><span class="line">   &gt;This is note text.</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><blockquote></blockquote><blockquote><p>This note text</p></blockquote></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Adobe</span>](<span class="link">https://www.adobe.com</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度</a></p><p>我们可以通过ctrl+左键访问此链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">See [<span class="string">Overview example article</span>](<span class="link">../../overview.md</span>)</span><br></pre></td></tr></table></figure><p>See <a href="../../overview.md">Overview example article</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Adobe Logo](/docs/contributor/assets/adobe<span class="emphasis">_standard_</span>logo.png &quot;Hover text&quot;</span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="code">`inline code`</span> within a paragraph of text.</span><br></pre></td></tr></table></figure><p>a  <code>fds</code> dsad</p><p>三个 ~~~ 可以创建一个代码块并可以选择语言</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2023/06/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/06/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><p>本人博客使用hexo生成网页，gitee仓库以及git pages服务</p><h2 id="Node-JS环境配置"><a href="#Node-JS环境配置" class="headerlink" title="Node.JS环境配置"></a>Node.JS环境配置</h2><p>推荐在Linux系统下配置：</p><p>本人使用CentOS虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 用命令行形式进行下载</span><br><span class="line">wget https://nodejs.org/dist/v14.15.4/node-v14.15.4-linux-x64.tar.xz</span><br><span class="line"># 解压</span><br><span class="line">tar -xvf node-v14.15.4-linux-x64.tar.xz</span><br><span class="line">mkdir -p /usr/local/nodejs</span><br><span class="line">mv node-v14.15.4-linux-x64/* /usr/local/nodejs/</span><br><span class="line"># 建立node软链接</span><br><span class="line">ln -s /usr/local/nodejs/bin/node /usr/local/bin</span><br><span class="line"># 建立npm 软链接</span><br><span class="line">ln -s /usr/local/nodejs/bin/npm /usr/local/bin</span><br><span class="line"></span><br><span class="line"># 设置国内淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"># 查看设置信息</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>检查node和npm安装状况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node - v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><a href="https://imgtg.com/image/OxfLPU"><img src="https://i.imgtg.com/2023/07/08/OxfLPU.png" alt="OxfLPU.png"></a></p><p>出现这种版本号即为成功安装了NodeJs环境。如果安装比较慢则更改源为淘宝源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org # 修改为淘宝源</span><br><span class="line">npm config get registry # 查看现在的源</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>进入<a href="%5BHexo%5D(https://hexo.io/zh-cn/)">Hexo官网</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Hexo官网为我们提供了大量各种风格的博客主题，懒人党福音</p><p>hexo安装好后我们写第一个博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;my first blog&quot;</span><br></pre></td></tr></table></figure><p>之后就可以看到</p><p><a href="https://imgtg.com/image/OxfSvq"><img src="https://i.imgtg.com/2023/07/08/OxfSvq.png" alt="OxfSvq.png"></a></p><p>在此路径下存着我们以后的所有博客文件</p><p>之后我们先试试在本地预览一下我们的博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存</span><br><span class="line">hexo clean</span><br><span class="line"># 生成网页</span><br><span class="line">hexo g</span><br><span class="line"># 运行本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><a href="https://imgtg.com/image/Oxf0cc"><img src="https://i.imgtg.com/2023/07/08/Oxf0cc.png" alt="Oxf0cc.png"></a></p><p>在本地浏览器打开上述链接（虚拟机把localhost改为虚拟机的IP地址即可）</p><p>本地预览没问题则开始hexo三联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存</span><br><span class="line">hexo clean</span><br><span class="line"># 生成网页</span><br><span class="line">hexo g</span><br><span class="line"># 上传git服务器（关于git配置这里就不详细赘述）</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>之后在gitee的仓库主页将项目开源再打开gitpages服务即可完成个人主页搭建</p><h2 id="个性域名"><a href="#个性域名" class="headerlink" title="个性域名"></a>个性域名</h2><p>由于gitee pages服务不支持自定义域名了（企业版git pages pro可以）所以我们另辟蹊径使用github和netlify部署（需要科学上网）。由于我们已经在gitee上创建好了仓库，那么我们可以直接镜像到github仓库中，当然要先在github中创建好一个新的空仓库（这个方法也可以解决commit到github报443的问题）。</p><p><a href="https://imgtg.com/image/OxXkGq"><img src="https://i.imgtg.com/2023/07/09/OxXkGq.png" alt="OxXkGq.png"></a></p><p>在gitee中配置好镜像仓库之后我们就可以在netlify中部署了，注意在netlify中链接github仓库时注意将构建命令更改为<code>npm run netlify</code></p><p><a href="https://imgtg.com/image/OxXFhr"><img src="https://i.imgtg.com/2023/07/09/OxXFhr.png" alt="OxXFhr.png"></a></p><p>这样我们就完成在netlify上的部署。接下来我们要绑定自己的域名。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>想要绑定自己的域名首先得有一个域名，各大互联网云服务商都提供域名购买服务当然需要点￥。</p><p>购买好域名就在域名的dns解析中加入CNAME域名映射，映射地址为上述完成部署的netlify的博客地址。之后在netlify中添加DNS解析到自己的域名即可。</p><p>这样我们就完成了自定义域名，但这样还有一个问题就是netlify属于国外的服务商，国内并不能正常访问，下面我们就需要在ClouldFlare加速国内。</p><h2 id="CloudFlare加速"><a href="#CloudFlare加速" class="headerlink" title="CloudFlare加速"></a>CloudFlare加速</h2><p>首先注册并登录CloudFlare然后添加站点填入自己的域名即可，添加DNS记录，选择免费套餐即可完成国内加速。</p>]]></content>
      
      
      <categories>
          
          <category> 稀奇古怪的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2023/06/22/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/22/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h3 id="头文件！"><a href="#头文件！" class="headerlink" title="头文件！"></a>头文件！</h3><p>！+tab键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文本类型 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签必为html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部标签包含网页配置项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置视窗 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排版标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标题h1-h6每个都独占一行,加粗显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 段落标签p 独占一行,段落之间存在间隙 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- span标签无语义标签，行内元素可以同行显示，可以用来添加样式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- br标签，换行标签，强制换行 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单标签，只有开始没有闭合，没有内容时可以使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hr，分割线 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落标签p</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落标签p段落标签p段落标签p段落<span class="tag">&lt;<span class="name">p</span>&gt;</span>插入信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span>标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落标签p段落标签p段落标签p段落<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>插入信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span>标签p段落标签p段落标签<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p段落标签p</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文本修饰标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- b 加粗标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- u 下划线 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- i 斜体 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- s 删除线 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超链接a"><a href="#超链接a" class="headerlink" title="超链接a"></a>超链接a</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- a 超链接标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签属性=&quot;属性值&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- href=&quot;链接地址&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- target=&quot;&quot;页面跳转方式 _self _blank --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- _self 本地跳转 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- _blank 新建一页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片标签img"><a href="#图片标签img" class="headerlink" title="图片标签img"></a>图片标签img</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img 图片标签 单标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        属性</span></span><br><span class="line"><span class="comment">        src=&quot;&quot; 图片路径 尽量使用相对路径，避免使用绝对路径</span></span><br><span class="line"><span class="comment">        ../ 退到上一层目录</span></span><br><span class="line"><span class="comment">        width=&quot;&quot; 单位px 只设置宽度，等比例缩放</span></span><br><span class="line"><span class="comment">        height=&quot;&quot; 单位px</span></span><br><span class="line"><span class="comment">        title=&quot;&quot; 鼠标放上面显示的文字</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img//log.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是俺的头像&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表ul"><a href="#列表ul" class="headerlink" title="列表ul"></a>列表ul</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无序列表</span></span><br><span class="line"><span class="comment">    ul</span></span><br><span class="line"><span class="comment">        li 列表项</span></span><br><span class="line"><span class="comment">    type 修改列表的序标(可以通过CSS覆盖掉)</span></span><br><span class="line"><span class="comment">        disc 黑点</span></span><br><span class="line"><span class="comment">        circle 空心圆点</span></span><br><span class="line"><span class="comment">        square 黑色方块</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 有序列表ol --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>er<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>si<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>san<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        自定义列表</span></span><br><span class="line"><span class="comment">        dl</span></span><br><span class="line"><span class="comment">            dt 列表标题</span></span><br><span class="line"><span class="comment">            dd 列表项</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>j<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>l<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>k<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单form"><a href="#表单form" class="headerlink" title="表单form"></a>表单form</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- form 表单 设置action表单提交的接口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input 文本输入框</span></span><br><span class="line"><span class="comment">            type 输入框类型</span></span><br><span class="line"><span class="comment">                text 普通文本输入框</span></span><br><span class="line"><span class="comment">                    placeholder未输入显示提示文字</span></span><br><span class="line"><span class="comment">                    value 默认值</span></span><br><span class="line"><span class="comment">                    disabled 禁用</span></span><br><span class="line"><span class="comment">                password 密码输入框</span></span><br><span class="line"><span class="comment">                radio 单选框同一单选框需要设置name属性</span></span><br><span class="line"><span class="comment">                label 通过文字控制radio，扩大选择范围</span></span><br><span class="line"><span class="comment">                checked 默认勾选</span></span><br><span class="line"><span class="comment">        select 下拉菜单</span></span><br><span class="line"><span class="comment">            option 选项</span></span><br><span class="line"><span class="comment">        textarea 文本域（大段文字）</span></span><br><span class="line"><span class="comment">            rows 行</span></span><br><span class="line"><span class="comment">            rols 列</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;接口地址&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span> 性别:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        兴趣爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xie&quot;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;xie&quot;</span>&gt;</span>xie<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qiao&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;qiao&quot;</span>&gt;</span>qiao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dream&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;dream&quot;</span>&gt;</span>dream<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bei&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bei&quot;</span>&gt;</span>bei<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>学校：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;南信大&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>家乡：</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>快乐老家<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;自我介绍&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表单里的按钮</span></span><br><span class="line"><span class="comment">            input</span></span><br><span class="line"><span class="comment">                type</span></span><br><span class="line"><span class="comment">                    reset 重置</span></span><br><span class="line"><span class="comment">                    submit 提交</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义按钮button --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
